#-----------------------------------------------------------
# Vivado v2018.2 (64-bit)
# SW Build 2258646 on Thu Jun 14 20:02:38 MDT 2018
# IP Build 2256618 on Thu Jun 14 22:10:49 MDT 2018
# Start of session at: Tue Jun 11 22:25:07 2019
# Process ID: 1157
# Current directory: /home/saverio/Scrivania/tesi/script/bram
# Command line: vivado -mode tcl
# Log file: /home/saverio/Scrivania/tesi/script/bram/vivado.log
# Journal file: /home/saverio/Scrivania/tesi/script/bram/vivado.jou
#-----------------------------------------------------------
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl 
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		array set offset [dict get $mydict $frame]
# 		#puts offset [array names ]
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 
# 			if {$stessa_word ==0} {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					#puts $sec_word
# 					#puts "seconda word $sec_word" 
# 					set word [expr $word | $sec_word] 
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				if {$f>=1} {
# 						append bram [format %X [expr $word]]
# 				}
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
can't array set "offset": variable isn't array
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
can't array set "offset": variable isn't array
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
0
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [array size offset ]
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 
# 			if {$stessa_word ==0} {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					#puts $sec_word
# 					#puts "seconda word $sec_word" 
# 					set word [expr $word | $sec_word] 
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				if {$f>=1} {
# 						append bram [format %X [expr $word]]
# 				}
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
0
offset 515
contatore 0
numero frame 16
numero frame -i 16
qui
numero word 1
bram 00002039f00000000F8
offset 540
contatore 16
numero frame 16
numero frame -i 0
numero word 0
bram 00002039f00000000F8
offset 545
contatore 16
numero frame 17
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A
offset 570
contatore 17
numero frame 17
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A
offset 579
contatore 17
numero frame 18
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A
offset 604
contatore 18
numero frame 18
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A
offset 609
contatore 18
numero frame 19
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A
offset 634
contatore 19
numero frame 19
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A
offset 643
contatore 19
numero frame 20
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A
offset 668
contatore 20
numero frame 20
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A
offset 673
contatore 20
numero frame 21
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A
offset 698
contatore 21
numero frame 21
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A
offset 707
contatore 21
numero frame 22
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A
offset 732
contatore 22
numero frame 22
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A
offset 737
contatore 22
numero frame 23
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 762
contatore 23
numero frame 23
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 771
contatore 23
numero frame 24
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 796
contatore 24
numero frame 24
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 801
contatore 24
numero frame 25
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 826
contatore 25
numero frame 25
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 835
contatore 25
numero frame 26
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 860
contatore 26
numero frame 26
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 865
contatore 26
numero frame 27
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 890
contatore 27
numero frame 27
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 899
contatore 27
numero frame 28
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 924
contatore 28
numero frame 28
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 929
contatore 28
numero frame 29
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 954
contatore 29
numero frame 29
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 963
contatore 29
numero frame 30
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 988
contatore 30
numero frame 30
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 993
contatore 30
numero frame 31
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 1018
contatore 31
numero frame 31
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
0
byte 00002039f
par 0
word 0
par 0
word 0
par 2
word 100
par 3
word 19F
word modificata con parità 30000019F
9
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
18
byte 81000000A
par 8
word 2000000
par 8
word 2000000
par 8
word 2000000
par 8
word 200000A
word modificata con parità 80200000A
27
byte 1400000A1
par 0
word 28000000
par 0
word 28000000
par 0
word 28000000
par 0
word 280000A1
word modificata con parità 0280000A1
36
byte 400000A14
par 0
word 80000000
par 0
word 80000000
par 0
word 80000500
par 0
word 80000514
word modificata con parità 080000514
45
byte 00000A140
par 0
word 0
par 0
word 0
par 0
word 5000
par 1
word 5040
word modificata con parità 100005040
54
byte 0000A1400
par 0
word 0
par 0
word 20000
par 2
word 20A00
par 2
word 20A00
word modificata con parità 200020A00
63
byte 000A14000
par 0
word 0
par 0
word 280000
par 0
word 28A000
par 0
word 28A000
word modificata con parità 00028A000
72
byte 00A140000
par 0
word 1000000
par 0
word 1850000
par 0
word 1850000
par 0
word 1850000
word modificata con parità 001850000
81
byte 0A1400000
par 0
word 14000000
par 0
word 14500000
par 0
word 14500000
par 0
word 14500000
word modificata con parità 014500000
90
byte A1400000A
par 8
word 42000000
par 12
word 42000000
par 12
word 42000000
par 12
word 4200000A
word modificata con parità C4200000A
99
byte 1400000A1
par 0
word 28000000
par 0
word 28000000
par 0
word 28000000
par 0
word 280000A1
word modificata con parità 0280000A1
108
byte 400000A14
par 0
word 80000000
par 0
word 80000000
par 0
word 80000500
par 0
word 80000514
word modificata con parità 080000514
117
byte 00000A140
par 0
word 0
par 0
word 0
par 0
word 5000
par 1
word 5040
word modificata con parità 100005040
126
byte 0000A1400
par 0
word 0
par 0
word 20000
par 2
word 20A00
par 2
word 20A00
word modificata con parità 200020A00
135
byte 000A00000
par 0
word 0
par 0
word 280000
par 0
word 280000
par 0
word 280000
word modificata con parità 000280000
144
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
153
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
162
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
171
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
180
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
189
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
198
byte 0004
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 4
word modificata con parità 000000004
30000019F00000000F80200000A0280000A1080000514100005040200020A0000028A000001850000014500000C4200000A0280000A1080000514100005040200020A000002800000003C00000003C00000003C00000003C00000003C00000003C0000000000004
lunghezza 207
[{}]
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [array size [dict get $mydict $frame] ]
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 
# 			if {$stessa_word ==0} {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					#puts $sec_word
# 					#puts "seconda word $sec_word" 
# 					set word [expr $word | $sec_word] 
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				if {$f>=1} {
# 						append bram [format %X [expr $word]]
# 				}
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
0
offset 515
contatore 0
numero frame 16
numero frame -i 16
qui
numero word 1
bram 00002039f00000000F8
offset 540
contatore 16
numero frame 16
numero frame -i 0
numero word 0
bram 00002039f00000000F8
offset 545
contatore 16
numero frame 17
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A
offset 570
contatore 17
numero frame 17
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A
offset 579
contatore 17
numero frame 18
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A
offset 604
contatore 18
numero frame 18
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A
offset 609
contatore 18
numero frame 19
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A
offset 634
contatore 19
numero frame 19
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A
offset 643
contatore 19
numero frame 20
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A
offset 668
contatore 20
numero frame 20
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A
offset 673
contatore 20
numero frame 21
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A
offset 698
contatore 21
numero frame 21
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A
offset 707
contatore 21
numero frame 22
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A
offset 732
contatore 22
numero frame 22
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A
offset 737
contatore 22
numero frame 23
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 762
contatore 23
numero frame 23
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 771
contatore 23
numero frame 24
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 796
contatore 24
numero frame 24
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 801
contatore 24
numero frame 25
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 826
contatore 25
numero frame 25
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 835
contatore 25
numero frame 26
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 860
contatore 26
numero frame 26
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 865
contatore 26
numero frame 27
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 890
contatore 27
numero frame 27
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 899
contatore 27
numero frame 28
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 924
contatore 28
numero frame 28
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 929
contatore 28
numero frame 29
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 954
contatore 29
numero frame 29
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 963
contatore 29
numero frame 30
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 988
contatore 30
numero frame 30
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 993
contatore 30
numero frame 31
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 1018
contatore 31
numero frame 31
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
0
byte 00002039f
par 0
word 0
par 0
word 0
par 2
word 100
par 3
word 19F
word modificata con parità 30000019F
9
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
18
byte 81000000A
par 8
word 2000000
par 8
word 2000000
par 8
word 2000000
par 8
word 200000A
word modificata con parità 80200000A
27
byte 1400000A1
par 0
word 28000000
par 0
word 28000000
par 0
word 28000000
par 0
word 280000A1
word modificata con parità 0280000A1
36
byte 400000A14
par 0
word 80000000
par 0
word 80000000
par 0
word 80000500
par 0
word 80000514
word modificata con parità 080000514
45
byte 00000A140
par 0
word 0
par 0
word 0
par 0
word 5000
par 1
word 5040
word modificata con parità 100005040
54
byte 0000A1400
par 0
word 0
par 0
word 20000
par 2
word 20A00
par 2
word 20A00
word modificata con parità 200020A00
63
byte 000A14000
par 0
word 0
par 0
word 280000
par 0
word 28A000
par 0
word 28A000
word modificata con parità 00028A000
72
byte 00A140000
par 0
word 1000000
par 0
word 1850000
par 0
word 1850000
par 0
word 1850000
word modificata con parità 001850000
81
byte 0A1400000
par 0
word 14000000
par 0
word 14500000
par 0
word 14500000
par 0
word 14500000
word modificata con parità 014500000
90
byte A1400000A
par 8
word 42000000
par 12
word 42000000
par 12
word 42000000
par 12
word 4200000A
word modificata con parità C4200000A
99
byte 1400000A1
par 0
word 28000000
par 0
word 28000000
par 0
word 28000000
par 0
word 280000A1
word modificata con parità 0280000A1
108
byte 400000A14
par 0
word 80000000
par 0
word 80000000
par 0
word 80000500
par 0
word 80000514
word modificata con parità 080000514
117
byte 00000A140
par 0
word 0
par 0
word 0
par 0
word 5000
par 1
word 5040
word modificata con parità 100005040
126
byte 0000A1400
par 0
word 0
par 0
word 20000
par 2
word 20A00
par 2
word 20A00
word modificata con parità 200020A00
135
byte 000A00000
par 0
word 0
par 0
word 280000
par 0
word 280000
par 0
word 280000
word modificata con parità 000280000
144
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
153
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
162
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
171
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
180
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
189
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
198
byte 0004
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 4
word modificata con parità 000000004
30000019F00000000F80200000A0280000A1080000514100005040200020A0000028A000001850000014500000C4200000A0280000A1080000514100005040200020A000002800000003C00000003C00000003C00000003C00000003C00000003C0000000000004
lunghezza 207
[{}]
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [string size [dict get $mydict $frame] ]
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 
# 			if {$stessa_word ==0} {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					#puts $sec_word
# 					#puts "seconda word $sec_word" 
# 					set word [expr $word | $sec_word] 
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				if {$f>=1} {
# 						append bram [format %X [expr $word]]
# 				}
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
unknown or ambiguous subcommand "size": must be bytelength, compare, equal, first, index, is, last, length, map, match, range, repeat, replace, reverse, tolower, totitle, toupper, trim, trimleft, trimright, wordend, or wordstart
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
unknown or ambiguous subcommand "size": must be bytelength, compare, equal, first, index, is, last, length, map, match, range, repeat, replace, reverse, tolower, totitle, toupper, trim, trimleft, trimright, wordend, or wordstart
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [string length [dict get $mydict $frame] ]
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 
# 			if {$stessa_word ==0} {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					#puts $sec_word
# 					#puts "seconda word $sec_word" 
# 					set word [expr $word | $sec_word] 
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				if {$f>=1} {
# 						append bram [format %X [expr $word]]
# 				}
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
129
offset 515
contatore 0
numero frame 16
numero frame -i 16
qui
numero word 1
bram 00002039f00000000F8
offset 540
contatore 16
numero frame 16
numero frame -i 0
numero word 0
bram 00002039f00000000F8
offset 545
contatore 16
numero frame 17
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A
offset 570
contatore 17
numero frame 17
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A
offset 579
contatore 17
numero frame 18
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A
offset 604
contatore 18
numero frame 18
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A
offset 609
contatore 18
numero frame 19
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A
offset 634
contatore 19
numero frame 19
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A
offset 643
contatore 19
numero frame 20
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A
offset 668
contatore 20
numero frame 20
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A
offset 673
contatore 20
numero frame 21
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A
offset 698
contatore 21
numero frame 21
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A
offset 707
contatore 21
numero frame 22
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A
offset 732
contatore 22
numero frame 22
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A
offset 737
contatore 22
numero frame 23
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 762
contatore 23
numero frame 23
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 771
contatore 23
numero frame 24
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 796
contatore 24
numero frame 24
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 801
contatore 24
numero frame 25
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 826
contatore 25
numero frame 25
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 835
contatore 25
numero frame 26
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 860
contatore 26
numero frame 26
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 865
contatore 26
numero frame 27
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 890
contatore 27
numero frame 27
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 899
contatore 27
numero frame 28
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 924
contatore 28
numero frame 28
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 929
contatore 28
numero frame 29
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 954
contatore 29
numero frame 29
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 963
contatore 29
numero frame 30
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 988
contatore 30
numero frame 30
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 993
contatore 30
numero frame 31
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 1018
contatore 31
numero frame 31
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
0
byte 00002039f
par 0
word 0
par 0
word 0
par 2
word 100
par 3
word 19F
word modificata con parità 30000019F
9
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
18
byte 81000000A
par 8
word 2000000
par 8
word 2000000
par 8
word 2000000
par 8
word 200000A
word modificata con parità 80200000A
27
byte 1400000A1
par 0
word 28000000
par 0
word 28000000
par 0
word 28000000
par 0
word 280000A1
word modificata con parità 0280000A1
36
byte 400000A14
par 0
word 80000000
par 0
word 80000000
par 0
word 80000500
par 0
word 80000514
word modificata con parità 080000514
45
byte 00000A140
par 0
word 0
par 0
word 0
par 0
word 5000
par 1
word 5040
word modificata con parità 100005040
54
byte 0000A1400
par 0
word 0
par 0
word 20000
par 2
word 20A00
par 2
word 20A00
word modificata con parità 200020A00
63
byte 000A14000
par 0
word 0
par 0
word 280000
par 0
word 28A000
par 0
word 28A000
word modificata con parità 00028A000
72
byte 00A140000
par 0
word 1000000
par 0
word 1850000
par 0
word 1850000
par 0
word 1850000
word modificata con parità 001850000
81
byte 0A1400000
par 0
word 14000000
par 0
word 14500000
par 0
word 14500000
par 0
word 14500000
word modificata con parità 014500000
90
byte A1400000A
par 8
word 42000000
par 12
word 42000000
par 12
word 42000000
par 12
word 4200000A
word modificata con parità C4200000A
99
byte 1400000A1
par 0
word 28000000
par 0
word 28000000
par 0
word 28000000
par 0
word 280000A1
word modificata con parità 0280000A1
108
byte 400000A14
par 0
word 80000000
par 0
word 80000000
par 0
word 80000500
par 0
word 80000514
word modificata con parità 080000514
117
byte 00000A140
par 0
word 0
par 0
word 0
par 0
word 5000
par 1
word 5040
word modificata con parità 100005040
126
byte 0000A1400
par 0
word 0
par 0
word 20000
par 2
word 20A00
par 2
word 20A00
word modificata con parità 200020A00
135
byte 000A00000
par 0
word 0
par 0
word 280000
par 0
word 280000
par 0
word 280000
word modificata con parità 000280000
144
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
153
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
162
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
171
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
180
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
189
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
198
byte 0004
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 4
word modificata con parità 000000004
30000019F00000000F80200000A0280000A1080000514100005040200020A0000028A000001850000014500000C4200000A0280000A1080000514100005040200020A000002800000003C00000003C00000003C00000003C00000003C00000003C0000000000004
lunghezza 207
[{}]
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts  [split [dict get $mydict $frame] ] { }
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 
# 			if {$stessa_word ==0} {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					#puts $sec_word
# 					#puts "seconda word $sec_word" 
# 					set word [expr $word | $sec_word] 
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				if {$f>=1} {
# 						append bram [format %X [expr $word]]
# 				}
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
can not find channel named "515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 {}"
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [split [string  [dict get $mydict $frame] ]] { }
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 
# 			if {$stessa_word ==0} {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					#puts $sec_word
# 					#puts "seconda word $sec_word" 
# 					set word [expr $word | $sec_word] 
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				if {$f>=1} {
# 						append bram [format %X [expr $word]]
# 				}
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
unknown or ambiguous subcommand "515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 ": must be bytelength, compare, equal, first, index, is, last, length, map, match, range, repeat, replace, reverse, tolower, totitle, toupper, trim, trimleft, trimright, wordend, or wordstart
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [split "[string  [dict get $mydict $frame] ]"] { }
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 
# 			if {$stessa_word ==0} {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					#puts $sec_word
# 					#puts "seconda word $sec_word" 
# 					set word [expr $word | $sec_word] 
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				if {$f>=1} {
# 						append bram [format %X [expr $word]]
# 				}
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
unknown or ambiguous subcommand "515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 ": must be bytelength, compare, equal, first, index, is, last, length, map, match, range, repeat, replace, reverse, tolower, totitle, toupper, trim, trimleft, trimright, wordend, or wordstart
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [split "[dict get $mydict $frame] "] { }
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 
# 			if {$stessa_word ==0} {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					#puts $sec_word
# 					#puts "seconda word $sec_word" 
# 					set word [expr $word | $sec_word] 
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				if {$f>=1} {
# 						append bram [format %X [expr $word]]
# 				}
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
can not find channel named "515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 {} {}"
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [split "[dict get $mydict $frame] " " "] 
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 
# 			if {$stessa_word ==0} {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					#puts $sec_word
# 					#puts "seconda word $sec_word" 
# 					set word [expr $word | $sec_word] 
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				if {$f>=1} {
# 						append bram [format %X [expr $word]]
# 				}
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 {} {}
offset 515
contatore 0
numero frame 16
numero frame -i 16
qui
numero word 1
bram 00002039f00000000F8
offset 540
contatore 16
numero frame 16
numero frame -i 0
numero word 0
bram 00002039f00000000F8
offset 545
contatore 16
numero frame 17
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A
offset 570
contatore 17
numero frame 17
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A
offset 579
contatore 17
numero frame 18
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A
offset 604
contatore 18
numero frame 18
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A
offset 609
contatore 18
numero frame 19
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A
offset 634
contatore 19
numero frame 19
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A
offset 643
contatore 19
numero frame 20
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A
offset 668
contatore 20
numero frame 20
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A
offset 673
contatore 20
numero frame 21
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A
offset 698
contatore 21
numero frame 21
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A
offset 707
contatore 21
numero frame 22
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A
offset 732
contatore 22
numero frame 22
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A
offset 737
contatore 22
numero frame 23
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 762
contatore 23
numero frame 23
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 771
contatore 23
numero frame 24
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 796
contatore 24
numero frame 24
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 801
contatore 24
numero frame 25
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 826
contatore 25
numero frame 25
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 835
contatore 25
numero frame 26
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 860
contatore 26
numero frame 26
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 865
contatore 26
numero frame 27
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 890
contatore 27
numero frame 27
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 899
contatore 27
numero frame 28
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 924
contatore 28
numero frame 28
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 929
contatore 28
numero frame 29
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 954
contatore 29
numero frame 29
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 963
contatore 29
numero frame 30
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 988
contatore 30
numero frame 30
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 993
contatore 30
numero frame 31
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 1018
contatore 31
numero frame 31
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
0
byte 00002039f
par 0
word 0
par 0
word 0
par 2
word 100
par 3
word 19F
word modificata con parità 30000019F
9
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
18
byte 81000000A
par 8
word 2000000
par 8
word 2000000
par 8
word 2000000
par 8
word 200000A
word modificata con parità 80200000A
27
byte 1400000A1
par 0
word 28000000
par 0
word 28000000
par 0
word 28000000
par 0
word 280000A1
word modificata con parità 0280000A1
36
byte 400000A14
par 0
word 80000000
par 0
word 80000000
par 0
word 80000500
par 0
word 80000514
word modificata con parità 080000514
45
byte 00000A140
par 0
word 0
par 0
word 0
par 0
word 5000
par 1
word 5040
word modificata con parità 100005040
54
byte 0000A1400
par 0
word 0
par 0
word 20000
par 2
word 20A00
par 2
word 20A00
word modificata con parità 200020A00
63
byte 000A14000
par 0
word 0
par 0
word 280000
par 0
word 28A000
par 0
word 28A000
word modificata con parità 00028A000
72
byte 00A140000
par 0
word 1000000
par 0
word 1850000
par 0
word 1850000
par 0
word 1850000
word modificata con parità 001850000
81
byte 0A1400000
par 0
word 14000000
par 0
word 14500000
par 0
word 14500000
par 0
word 14500000
word modificata con parità 014500000
90
byte A1400000A
par 8
word 42000000
par 12
word 42000000
par 12
word 42000000
par 12
word 4200000A
word modificata con parità C4200000A
99
byte 1400000A1
par 0
word 28000000
par 0
word 28000000
par 0
word 28000000
par 0
word 280000A1
word modificata con parità 0280000A1
108
byte 400000A14
par 0
word 80000000
par 0
word 80000000
par 0
word 80000500
par 0
word 80000514
word modificata con parità 080000514
117
byte 00000A140
par 0
word 0
par 0
word 0
par 0
word 5000
par 1
word 5040
word modificata con parità 100005040
126
byte 0000A1400
par 0
word 0
par 0
word 20000
par 2
word 20A00
par 2
word 20A00
word modificata con parità 200020A00
135
byte 000A00000
par 0
word 0
par 0
word 280000
par 0
word 280000
par 0
word 280000
word modificata con parità 000280000
144
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
153
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
162
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
171
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
180
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
189
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
198
byte 0004
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 4
word modificata con parità 000000004
30000019F00000000F80200000A0280000A1080000514100005040200020A0000028A000001850000014500000C4200000A0280000A1080000514100005040200020A000002800000003C00000003C00000003C00000003C00000003C00000003C0000000000004
lunghezza 207
[{}]
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		set offset [split "[dict get $mydict $frame] " " "] 
# 
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 
# 			if {$stessa_word ==0} {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					#puts $sec_word
# 					#puts "seconda word $sec_word" 
# 					set word [expr $word | $sec_word] 
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				if {$f>=1} {
# 						append bram [format %X [expr $word]]
# 				}
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
offset 515
contatore 0
numero frame 16
numero frame -i 16
qui
numero word 1
bram 00002039f00000000F8
offset 540
contatore 16
numero frame 16
numero frame -i 0
numero word 0
bram 00002039f00000000F8
offset 545
contatore 16
numero frame 17
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A
offset 570
contatore 17
numero frame 17
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A
offset 579
contatore 17
numero frame 18
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A
offset 604
contatore 18
numero frame 18
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A
offset 609
contatore 18
numero frame 19
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A
offset 634
contatore 19
numero frame 19
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A
offset 643
contatore 19
numero frame 20
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A
offset 668
contatore 20
numero frame 20
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A
offset 673
contatore 20
numero frame 21
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A
offset 698
contatore 21
numero frame 21
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A
offset 707
contatore 21
numero frame 22
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A
offset 732
contatore 22
numero frame 22
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A
offset 737
contatore 22
numero frame 23
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 762
contatore 23
numero frame 23
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 771
contatore 23
numero frame 24
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 796
contatore 24
numero frame 24
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 801
contatore 24
numero frame 25
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 826
contatore 25
numero frame 25
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 835
contatore 25
numero frame 26
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 860
contatore 26
numero frame 26
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 865
contatore 26
numero frame 27
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 890
contatore 27
numero frame 27
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 899
contatore 27
numero frame 28
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 924
contatore 28
numero frame 28
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 929
contatore 28
numero frame 29
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 954
contatore 29
numero frame 29
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 963
contatore 29
numero frame 30
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 988
contatore 30
numero frame 30
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 993
contatore 30
numero frame 31
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 1018
contatore 31
numero frame 31
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
0
byte 00002039f
par 0
word 0
par 0
word 0
par 2
word 100
par 3
word 19F
word modificata con parità 30000019F
9
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
18
byte 81000000A
par 8
word 2000000
par 8
word 2000000
par 8
word 2000000
par 8
word 200000A
word modificata con parità 80200000A
27
byte 1400000A1
par 0
word 28000000
par 0
word 28000000
par 0
word 28000000
par 0
word 280000A1
word modificata con parità 0280000A1
36
byte 400000A14
par 0
word 80000000
par 0
word 80000000
par 0
word 80000500
par 0
word 80000514
word modificata con parità 080000514
45
byte 00000A140
par 0
word 0
par 0
word 0
par 0
word 5000
par 1
word 5040
word modificata con parità 100005040
54
byte 0000A1400
par 0
word 0
par 0
word 20000
par 2
word 20A00
par 2
word 20A00
word modificata con parità 200020A00
63
byte 000A14000
par 0
word 0
par 0
word 280000
par 0
word 28A000
par 0
word 28A000
word modificata con parità 00028A000
72
byte 00A140000
par 0
word 1000000
par 0
word 1850000
par 0
word 1850000
par 0
word 1850000
word modificata con parità 001850000
81
byte 0A1400000
par 0
word 14000000
par 0
word 14500000
par 0
word 14500000
par 0
word 14500000
word modificata con parità 014500000
90
byte A1400000A
par 8
word 42000000
par 12
word 42000000
par 12
word 42000000
par 12
word 4200000A
word modificata con parità C4200000A
99
byte 1400000A1
par 0
word 28000000
par 0
word 28000000
par 0
word 28000000
par 0
word 280000A1
word modificata con parità 0280000A1
108
byte 400000A14
par 0
word 80000000
par 0
word 80000000
par 0
word 80000500
par 0
word 80000514
word modificata con parità 080000514
117
byte 00000A140
par 0
word 0
par 0
word 0
par 0
word 5000
par 1
word 5040
word modificata con parità 100005040
126
byte 0000A1400
par 0
word 0
par 0
word 20000
par 2
word 20A00
par 2
word 20A00
word modificata con parità 200020A00
135
byte 000A00000
par 0
word 0
par 0
word 280000
par 0
word 280000
par 0
word 280000
word modificata con parità 000280000
144
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
153
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
162
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
171
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
180
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
189
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
198
byte 0004
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 4
word modificata con parità 000000004
30000019F00000000F80200000A0280000A1080000514100005040200020A0000028A000001850000014500000C4200000A0280000A1080000514100005040200020A000002800000003C00000003C00000003C00000003C00000003C00000003C0000000000004
lunghezza 207
[{}]
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		set offset [split "[dict get $mydict $frame] " " "] 
# 		puts "offset $offset{0}"
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 
# 			if {$stessa_word ==0} {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					#puts $sec_word
# 					#puts "seconda word $sec_word" 
# 					set word [expr $word | $sec_word] 
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				if {$f>=1} {
# 						append bram [format %X [expr $word]]
# 				}
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
offset 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 {} {}{0}
offset 515
contatore 0
numero frame 16
numero frame -i 16
qui
numero word 1
bram 00002039f00000000F8
offset 540
contatore 16
numero frame 16
numero frame -i 0
numero word 0
bram 00002039f00000000F8
offset 545
contatore 16
numero frame 17
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A
offset 570
contatore 17
numero frame 17
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A
offset 579
contatore 17
numero frame 18
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A
offset 604
contatore 18
numero frame 18
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A
offset 609
contatore 18
numero frame 19
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A
offset 634
contatore 19
numero frame 19
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A
offset 643
contatore 19
numero frame 20
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A
offset 668
contatore 20
numero frame 20
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A
offset 673
contatore 20
numero frame 21
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A
offset 698
contatore 21
numero frame 21
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A
offset 707
contatore 21
numero frame 22
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A
offset 732
contatore 22
numero frame 22
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A
offset 737
contatore 22
numero frame 23
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 762
contatore 23
numero frame 23
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 771
contatore 23
numero frame 24
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 796
contatore 24
numero frame 24
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 801
contatore 24
numero frame 25
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 826
contatore 25
numero frame 25
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 835
contatore 25
numero frame 26
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 860
contatore 26
numero frame 26
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 865
contatore 26
numero frame 27
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 890
contatore 27
numero frame 27
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 899
contatore 27
numero frame 28
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 924
contatore 28
numero frame 28
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 929
contatore 28
numero frame 29
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 954
contatore 29
numero frame 29
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 963
contatore 29
numero frame 30
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 988
contatore 30
numero frame 30
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 993
contatore 30
numero frame 31
numero frame -i 1
numero word 1
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
offset 1018
contatore 31
numero frame 31
numero frame -i 0
numero word 0
bram 00002039f00000000F81000000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A1400000A
0
byte 00002039f
par 0
word 0
par 0
word 0
par 2
word 100
par 3
word 19F
word modificata con parità 30000019F
9
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
18
byte 81000000A
par 8
word 2000000
par 8
word 2000000
par 8
word 2000000
par 8
word 200000A
word modificata con parità 80200000A
27
byte 1400000A1
par 0
word 28000000
par 0
word 28000000
par 0
word 28000000
par 0
word 280000A1
word modificata con parità 0280000A1
36
byte 400000A14
par 0
word 80000000
par 0
word 80000000
par 0
word 80000500
par 0
word 80000514
word modificata con parità 080000514
45
byte 00000A140
par 0
word 0
par 0
word 0
par 0
word 5000
par 1
word 5040
word modificata con parità 100005040
54
byte 0000A1400
par 0
word 0
par 0
word 20000
par 2
word 20A00
par 2
word 20A00
word modificata con parità 200020A00
63
byte 000A14000
par 0
word 0
par 0
word 280000
par 0
word 28A000
par 0
word 28A000
word modificata con parità 00028A000
72
byte 00A140000
par 0
word 1000000
par 0
word 1850000
par 0
word 1850000
par 0
word 1850000
word modificata con parità 001850000
81
byte 0A1400000
par 0
word 14000000
par 0
word 14500000
par 0
word 14500000
par 0
word 14500000
word modificata con parità 014500000
90
byte A1400000A
par 8
word 42000000
par 12
word 42000000
par 12
word 42000000
par 12
word 4200000A
word modificata con parità C4200000A
99
byte 1400000A1
par 0
word 28000000
par 0
word 28000000
par 0
word 28000000
par 0
word 280000A1
word modificata con parità 0280000A1
108
byte 400000A14
par 0
word 80000000
par 0
word 80000000
par 0
word 80000500
par 0
word 80000514
word modificata con parità 080000514
117
byte 00000A140
par 0
word 0
par 0
word 0
par 0
word 5000
par 1
word 5040
word modificata con parità 100005040
126
byte 0000A1400
par 0
word 0
par 0
word 20000
par 2
word 20A00
par 2
word 20A00
word modificata con parità 200020A00
135
byte 000A00000
par 0
word 0
par 0
word 280000
par 0
word 280000
par 0
word 280000
word modificata con parità 000280000
144
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
153
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
162
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
171
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
180
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
189
byte 000F00000
par 0
word 0
par 0
word 3C0000
par 0
word 3C0000
par 0
word 3C0000
word modificata con parità 0003C0000
198
byte 0004
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 4
word modificata con parità 000000004
30000019F00000000F80200000A0280000A1080000514100005040200020A0000028A000001850000014500000C4200000A0280000A1080000514100005040200020A000002800000003C00000003C00000003C00000003C00000003C00000003C0000000000004
lunghezza 207
[{}]
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		set offset [split "[dict get $mydict $frame] " " "] 
# 		puts "offset $offset(0)"
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 
# 			if {$stessa_word ==0} {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					#puts $sec_word
# 					#puts "seconda word $sec_word" 
# 					set word [expr $word | $sec_word] 
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				if {$f>=1} {
# 						append bram [format %X [expr $word]]
# 				}
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
can't read "offset(0)": variable isn't array
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 
# 			if {$offset>=[expr $i*32] &&$offset<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					set word [expr $word | $sec_word] 
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 				append bram [format %X [expr $word]]
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
offset 515
contatore 0
numero frame 16
numero frame -i 16
qui
can't read "word": no such variable
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		set word 00000000
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 
# 			if {$offset>=[expr $i*32] &&$offset<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					set word [expr $word | $sec_word] 
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 				append bram [format %X [expr $word]]
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
offset 515
contatore 0
numero frame 16
numero frame -i 16
qui
numero word 1
bram 00002039f00000000F
offset 540
contatore 16
numero frame 16
numero frame -i 0
numero word 0
bram 00002039f00000000F
offset 545
contatore 16
numero frame 17
numero frame -i 1
numero word 1
bram 00002039f00000000F
offset 570
contatore 17
numero frame 17
numero frame -i 0
numero word 0
bram 00002039f00000000F
offset 579
contatore 17
numero frame 18
numero frame -i 1
numero word 1
bram 00002039f00000000F
offset 604
contatore 18
numero frame 18
numero frame -i 0
numero word 0
bram 00002039f00000000F
offset 609
contatore 18
numero frame 19
numero frame -i 1
numero word 1
bram 00002039f00000000F
offset 634
contatore 19
numero frame 19
numero frame -i 0
numero word 0
bram 00002039f00000000F
offset 643
contatore 19
numero frame 20
numero frame -i 1
numero word 1
bram 00002039f00000000F
offset 668
contatore 20
numero frame 20
numero frame -i 0
numero word 0
bram 00002039f00000000F
offset 673
contatore 20
numero frame 21
numero frame -i 1
numero word 1
bram 00002039f00000000F
offset 698
contatore 21
numero frame 21
numero frame -i 0
numero word 0
bram 00002039f00000000F
offset 707
contatore 21
numero frame 22
numero frame -i 1
numero word 1
bram 00002039f00000000F
offset 732
contatore 22
numero frame 22
numero frame -i 0
numero word 0
bram 00002039f00000000F
offset 737
contatore 22
numero frame 23
numero frame -i 1
numero word 1
bram 00002039f00000000F
offset 762
contatore 23
numero frame 23
numero frame -i 0
numero word 0
bram 00002039f00000000F
offset 771
contatore 23
numero frame 24
numero frame -i 1
numero word 1
bram 00002039f00000000F
offset 796
contatore 24
numero frame 24
numero frame -i 0
numero word 0
bram 00002039f00000000F
offset 801
contatore 24
numero frame 25
numero frame -i 1
numero word 1
bram 00002039f00000000F
offset 826
contatore 25
numero frame 25
numero frame -i 0
numero word 0
bram 00002039f00000000F
offset 835
contatore 25
numero frame 26
numero frame -i 1
numero word 1
bram 00002039f00000000F
offset 860
contatore 26
numero frame 26
numero frame -i 0
numero word 0
bram 00002039f00000000F
offset 865
contatore 26
numero frame 27
numero frame -i 1
numero word 1
bram 00002039f00000000F
offset 890
contatore 27
numero frame 27
numero frame -i 0
numero word 0
bram 00002039f00000000F
offset 899
contatore 27
numero frame 28
numero frame -i 1
numero word 1
bram 00002039f00000000F
offset 924
contatore 28
numero frame 28
numero frame -i 0
numero word 0
bram 00002039f00000000F
offset 929
contatore 28
numero frame 29
numero frame -i 1
numero word 1
bram 00002039f00000000F
offset 954
contatore 29
numero frame 29
numero frame -i 0
numero word 0
bram 00002039f00000000F
offset 963
contatore 29
numero frame 30
numero frame -i 1
numero word 1
bram 00002039f00000000F
offset 988
contatore 30
numero frame 30
numero frame -i 0
numero word 0
bram 00002039f00000000F
offset 993
contatore 30
numero frame 31
numero frame -i 1
numero word 1
bram 00002039f00000000F
offset 1018
contatore 31
numero frame 31
numero frame -i 0
numero word 0
bram 00002039f00000000F
0
byte 00002039f
par 0
word 0
par 0
word 0
par 2
word 100
par 3
word 19F
word modificata con parità 30000019F
9
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
18
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
27
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
36
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
45
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
54
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
63
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
72
byte 000000004
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 4
word modificata con parità 000000004
30000019F00000000F00000000F00000000F00000000F00000000F00000000F00000000F000000004
lunghezza 81
[{}]
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			if {$offset<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 				append bram [format %X [expr $word]]
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					set word [expr $word | $sec_word] 
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
numero word 1
bram 00002039f00000000F
numero frame 16
numero frame -i 0
offset 540
contatore 16
numero word 0
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 545
contatore 17
numero word 1
bram 00002039f00000000F
numero frame 17
numero frame -i 0
offset 570
contatore 17
numero word 0
bram 00002039f00000000F
numero frame 18
numero frame -i 1
offset 579
contatore 18
numero word 1
bram 00002039f00000000F
numero frame 18
numero frame -i 0
offset 604
contatore 18
numero word 0
bram 00002039f00000000F
numero frame 19
numero frame -i 1
offset 609
contatore 19
numero word 1
bram 00002039f00000000F
numero frame 19
numero frame -i 0
offset 634
contatore 19
numero word 0
bram 00002039f00000000F
numero frame 20
numero frame -i 1
offset 643
contatore 20
numero word 1
bram 00002039f00000000F
numero frame 20
numero frame -i 0
offset 668
contatore 20
numero word 0
bram 00002039f00000000F
numero frame 21
numero frame -i 1
offset 673
contatore 21
numero word 1
bram 00002039f00000000F
numero frame 21
numero frame -i 0
offset 698
contatore 21
numero word 0
bram 00002039f00000000F
numero frame 22
numero frame -i 1
offset 707
contatore 22
numero word 1
bram 00002039f00000000F
numero frame 22
numero frame -i 0
offset 732
contatore 22
numero word 0
bram 00002039f00000000F
numero frame 23
numero frame -i 1
offset 737
contatore 23
numero word 1
bram 00002039f00000000F
numero frame 23
numero frame -i 0
offset 762
contatore 23
numero word 0
bram 00002039f00000000F
numero frame 24
numero frame -i 1
offset 771
contatore 24
numero word 1
bram 00002039f00000000F
numero frame 24
numero frame -i 0
offset 796
contatore 24
numero word 0
bram 00002039f00000000F
numero frame 25
numero frame -i 1
offset 801
contatore 25
numero word 1
bram 00002039f00000000F
numero frame 25
numero frame -i 0
offset 826
contatore 25
numero word 0
bram 00002039f00000000F
numero frame 26
numero frame -i 1
offset 835
contatore 26
numero word 1
bram 00002039f00000000F
numero frame 26
numero frame -i 0
offset 860
contatore 26
numero word 0
bram 00002039f00000000F
numero frame 27
numero frame -i 1
offset 865
contatore 27
numero word 1
bram 00002039f00000000F
numero frame 27
numero frame -i 0
offset 890
contatore 27
numero word 0
bram 00002039f00000000F
numero frame 28
numero frame -i 1
offset 899
contatore 28
numero word 1
bram 00002039f00000000F
numero frame 28
numero frame -i 0
offset 924
contatore 28
numero word 0
bram 00002039f00000000F
numero frame 29
numero frame -i 1
offset 929
contatore 29
numero word 1
bram 00002039f00000000F
numero frame 29
numero frame -i 0
offset 954
contatore 29
numero word 0
bram 00002039f00000000F
numero frame 30
numero frame -i 1
offset 963
contatore 30
numero word 1
bram 00002039f00000000F
numero frame 30
numero frame -i 0
offset 988
contatore 30
numero word 0
bram 00002039f00000000F
numero frame 31
numero frame -i 1
offset 993
contatore 31
numero word 1
bram 00002039f00000000F
numero frame 31
numero frame -i 0
offset 1018
contatore 31
numero word 0
bram 00002039f00000000F
0
byte 00002039f
par 0
word 0
par 0
word 0
par 2
word 100
par 3
word 19F
word modificata con parità 30000019F
9
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
18
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
27
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
36
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
45
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
54
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
63
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
72
byte 000000004
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 4
word modificata con parità 000000004
30000019F00000000F00000000F00000000F00000000F00000000F00000000F00000000F000000004
lunghezza 81
[{}]
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			if {$offset<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 				
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					set word [expr $word | $sec_word] 
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				
# 				
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
numero word 1
bram 00002039f00000000F8
numero frame 16
numero frame -i 0
offset 540
contatore 16
numero word 0
bram 00002039f00000000F810000000
numero frame 17
numero frame -i 1
offset 545
contatore 17
numero word 1
bram 00002039f00000000F8100000002
numero frame 17
numero frame -i 0
offset 570
contatore 17
numero word 0
bram 00002039f00000000F81000000024000000
numero frame 18
numero frame -i 1
offset 579
contatore 18
numero word 1
bram 00002039f00000000F810000000240000008
numero frame 18
numero frame -i 0
offset 604
contatore 18
numero word 0
bram 00002039f00000000F81000000024000000810000000
numero frame 19
numero frame -i 1
offset 609
contatore 19
numero word 1
bram 00002039f00000000F810000000240000008100000002
numero frame 19
numero frame -i 0
offset 634
contatore 19
numero word 0
bram 00002039f00000000F8100000002400000081000000024000000
numero frame 20
numero frame -i 1
offset 643
contatore 20
numero word 1
bram 00002039f00000000F81000000024000000810000000240000008
numero frame 20
numero frame -i 0
offset 668
contatore 20
numero word 0
bram 00002039f00000000F8100000002400000081000000024000000810000000
numero frame 21
numero frame -i 1
offset 673
contatore 21
numero word 1
bram 00002039f00000000F81000000024000000810000000240000008100000002
numero frame 21
numero frame -i 0
offset 698
contatore 21
numero word 0
bram 00002039f00000000F810000000240000008100000002400000081000000024000000
numero frame 22
numero frame -i 1
offset 707
contatore 22
numero word 1
bram 00002039f00000000F8100000002400000081000000024000000810000000240000008
numero frame 22
numero frame -i 0
offset 732
contatore 22
numero word 0
bram 00002039f00000000F810000000240000008100000002400000081000000024000000810000000
numero frame 23
numero frame -i 1
offset 737
contatore 23
numero word 1
bram 00002039f00000000F8100000002400000081000000024000000810000000240000008100000002
numero frame 23
numero frame -i 0
offset 762
contatore 23
numero word 0
bram 00002039f00000000F81000000024000000810000000240000008100000002400000081000000024000000
numero frame 24
numero frame -i 1
offset 771
contatore 24
numero word 1
bram 00002039f00000000F810000000240000008100000002400000081000000024000000810000000240000008
numero frame 24
numero frame -i 0
offset 796
contatore 24
numero word 0
bram 00002039f00000000F81000000024000000810000000240000008100000002400000081000000024000000810000000
numero frame 25
numero frame -i 1
offset 801
contatore 25
numero word 1
bram 00002039f00000000F810000000240000008100000002400000081000000024000000810000000240000008100000002
numero frame 25
numero frame -i 0
offset 826
contatore 25
numero word 0
bram 00002039f00000000F8100000002400000081000000024000000810000000240000008100000002400000081000000024000000
numero frame 26
numero frame -i 1
offset 835
contatore 26
numero word 1
bram 00002039f00000000F81000000024000000810000000240000008100000002400000081000000024000000810000000240000008
numero frame 26
numero frame -i 0
offset 860
contatore 26
numero word 0
bram 00002039f00000000F8100000002400000081000000024000000810000000240000008100000002400000081000000024000000810000000
numero frame 27
numero frame -i 1
offset 865
contatore 27
numero word 1
bram 00002039f00000000F81000000024000000810000000240000008100000002400000081000000024000000810000000240000008100000002
numero frame 27
numero frame -i 0
offset 890
contatore 27
numero word 0
bram 00002039f00000000F810000000240000008100000002400000081000000024000000810000000240000008100000002400000081000000024000000
numero frame 28
numero frame -i 1
offset 899
contatore 28
numero word 1
bram 00002039f00000000F8100000002400000081000000024000000810000000240000008100000002400000081000000024000000810000000240000008
numero frame 28
numero frame -i 0
offset 924
contatore 28
numero word 0
bram 00002039f00000000F810000000240000008100000002400000081000000024000000810000000240000008100000002400000081000000024000000810000000
numero frame 29
numero frame -i 1
offset 929
contatore 29
numero word 1
bram 00002039f00000000F8100000002400000081000000024000000810000000240000008100000002400000081000000024000000810000000240000008100000002
numero frame 29
numero frame -i 0
offset 954
contatore 29
numero word 0
bram 00002039f00000000F81000000024000000810000000240000008100000002400000081000000024000000810000000240000008100000002400000081000000024000000
numero frame 30
numero frame -i 1
offset 963
contatore 30
numero word 1
bram 00002039f00000000F810000000240000008100000002400000081000000024000000810000000240000008100000002400000081000000024000000810000000240000008
numero frame 30
numero frame -i 0
offset 988
contatore 30
numero word 0
bram 00002039f00000000F81000000024000000810000000240000008100000002400000081000000024000000810000000240000008100000002400000081000000024000000810000000
numero frame 31
numero frame -i 1
offset 993
contatore 31
numero word 1
bram 00002039f00000000F810000000240000008100000002400000081000000024000000810000000240000008100000002400000081000000024000000810000000240000008100000002
numero frame 31
numero frame -i 0
offset 1018
contatore 31
numero word 0
bram 00002039f00000000F8100000002400000081000000024000000810000000240000008100000002400000081000000024000000810000000240000008100000002400000081000000024000000
0
byte 00002039f
par 0
word 0
par 0
word 0
par 2
word 100
par 3
word 19F
word modificata con parità 30000019F
9
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
18
byte 810000000
par 8
word 2000000
par 8
word 2000000
par 8
word 2000000
par 8
word 2000000
word modificata con parità 802000000
27
byte 240000008
par 0
word 48000000
par 0
word 48000000
par 0
word 48000000
par 0
word 48000008
word modificata con parità 048000008
36
byte 100000002
par 0
word 20000000
par 0
word 20000000
par 0
word 20000000
par 0
word 20000002
word modificata con parità 020000002
45
byte 400000081
par 0
word 80000000
par 0
word 80000000
par 0
word 80000000
par 0
word 80000081
word modificata con parità 080000081
54
byte 000000024
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 24
word modificata con parità 000000024
63
byte 000000810
par 0
word 0
par 0
word 0
par 0
word 400
par 0
word 410
word modificata con parità 000000410
72
byte 000000240
par 0
word 0
par 0
word 0
par 0
word 100
par 0
word 140
word modificata con parità 000000140
81
byte 000008100
par 0
word 0
par 0
word 0
par 0
word 4000
par 1
word 4000
word modificata con parità 100004000
90
byte 000002400
par 0
word 0
par 0
word 0
par 0
word 1200
par 0
word 1200
word modificata con parità 000001200
99
byte 000081000
par 0
word 0
par 0
word 20000
par 0
word 20800
par 0
word 20800
word modificata con parità 000020800
108
byte 000024000
par 0
word 0
par 0
word 0
par 2
word 2000
par 2
word 2000
word modificata con parità 200002000
117
byte 000810000
par 0
word 0
par 0
word 200000
par 0
word 208000
par 0
word 208000
word modificata con parità 000208000
126
byte 000240000
par 0
word 0
par 0
word 90000
par 0
word 90000
par 0
word 90000
word modificata con parità 000090000
135
byte 008100000
par 0
word 1000000
par 0
word 1040000
par 0
word 1040000
par 0
word 1040000
word modificata con parità 001040000
144
byte 002400000
par 0
word 0
par 0
word 900000
par 0
word 900000
par 0
word 900000
word modificata con parità 000900000
153
byte 000000000
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 0
word modificata con parità 000000000
162
byte F00000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
word modificata con parità 8E0000000
171
byte F00000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
word modificata con parità 8E0000000
180
byte F00000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
word modificata con parità 8E0000000
189
byte F00000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
word modificata con parità 8E0000000
198
byte F00000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
word modificata con parità 8E0000000
207
byte F00000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
word modificata con parità 8E0000000
216
byte 4
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 4
word modificata con parità 000000004
30000019F00000000F8020000000480000080200000020800000810000000240000004100000001401000040000000012000000208002000020000002080000000900000010400000009000000000000008E00000008E00000008E00000008E00000008E00000008E0000000000000004
lunghezza 225
[{}]
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			puts "f $f"
# 			if {$offset<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 				
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					set word [expr $word | $sec_word] 
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 1
numero word 1
bram 00002039f00000000F8
numero frame 16
numero frame -i 0
offset 540
contatore 16
f 0
numero word 0
bram 00002039f00000000F810000000
numero frame 17
numero frame -i 1
offset 545
contatore 17
f 1
numero word 1
bram 00002039f00000000F8100000002
numero frame 17
numero frame -i 0
offset 570
contatore 17
f 0
numero word 0
bram 00002039f00000000F81000000024000000
numero frame 18
numero frame -i 1
offset 579
contatore 18
f 1
numero word 1
bram 00002039f00000000F810000000240000008
numero frame 18
numero frame -i 0
offset 604
contatore 18
f 0
numero word 0
bram 00002039f00000000F81000000024000000810000000
numero frame 19
numero frame -i 1
offset 609
contatore 19
f 1
numero word 1
bram 00002039f00000000F810000000240000008100000002
numero frame 19
numero frame -i 0
offset 634
contatore 19
f 0
numero word 0
bram 00002039f00000000F8100000002400000081000000024000000
numero frame 20
numero frame -i 1
offset 643
contatore 20
f 1
numero word 1
bram 00002039f00000000F81000000024000000810000000240000008
numero frame 20
numero frame -i 0
offset 668
contatore 20
f 0
numero word 0
bram 00002039f00000000F8100000002400000081000000024000000810000000
numero frame 21
numero frame -i 1
offset 673
contatore 21
f 1
numero word 1
bram 00002039f00000000F81000000024000000810000000240000008100000002
numero frame 21
numero frame -i 0
offset 698
contatore 21
f 0
numero word 0
bram 00002039f00000000F810000000240000008100000002400000081000000024000000
numero frame 22
numero frame -i 1
offset 707
contatore 22
f 1
numero word 1
bram 00002039f00000000F8100000002400000081000000024000000810000000240000008
numero frame 22
numero frame -i 0
offset 732
contatore 22
f 0
numero word 0
bram 00002039f00000000F810000000240000008100000002400000081000000024000000810000000
numero frame 23
numero frame -i 1
offset 737
contatore 23
f 1
numero word 1
bram 00002039f00000000F8100000002400000081000000024000000810000000240000008100000002
numero frame 23
numero frame -i 0
offset 762
contatore 23
f 0
numero word 0
bram 00002039f00000000F81000000024000000810000000240000008100000002400000081000000024000000
numero frame 24
numero frame -i 1
offset 771
contatore 24
f 1
numero word 1
bram 00002039f00000000F810000000240000008100000002400000081000000024000000810000000240000008
numero frame 24
numero frame -i 0
offset 796
contatore 24
f 0
numero word 0
bram 00002039f00000000F81000000024000000810000000240000008100000002400000081000000024000000810000000
numero frame 25
numero frame -i 1
offset 801
contatore 25
f 1
numero word 1
bram 00002039f00000000F810000000240000008100000002400000081000000024000000810000000240000008100000002
numero frame 25
numero frame -i 0
offset 826
contatore 25
f 0
numero word 0
bram 00002039f00000000F8100000002400000081000000024000000810000000240000008100000002400000081000000024000000
numero frame 26
numero frame -i 1
offset 835
contatore 26
f 1
numero word 1
bram 00002039f00000000F81000000024000000810000000240000008100000002400000081000000024000000810000000240000008
numero frame 26
numero frame -i 0
offset 860
contatore 26
f 0
numero word 0
bram 00002039f00000000F8100000002400000081000000024000000810000000240000008100000002400000081000000024000000810000000
numero frame 27
numero frame -i 1
offset 865
contatore 27
f 1
numero word 1
bram 00002039f00000000F81000000024000000810000000240000008100000002400000081000000024000000810000000240000008100000002
numero frame 27
numero frame -i 0
offset 890
contatore 27
f 0
numero word 0
bram 00002039f00000000F810000000240000008100000002400000081000000024000000810000000240000008100000002400000081000000024000000
numero frame 28
numero frame -i 1
offset 899
contatore 28
f 1
numero word 1
bram 00002039f00000000F8100000002400000081000000024000000810000000240000008100000002400000081000000024000000810000000240000008
numero frame 28
numero frame -i 0
offset 924
contatore 28
f 0
numero word 0
bram 00002039f00000000F810000000240000008100000002400000081000000024000000810000000240000008100000002400000081000000024000000810000000
numero frame 29
numero frame -i 1
offset 929
contatore 29
f 1
numero word 1
bram 00002039f00000000F8100000002400000081000000024000000810000000240000008100000002400000081000000024000000810000000240000008100000002
numero frame 29
numero frame -i 0
offset 954
contatore 29
f 0
numero word 0
bram 00002039f00000000F81000000024000000810000000240000008100000002400000081000000024000000810000000240000008100000002400000081000000024000000
numero frame 30
numero frame -i 1
offset 963
contatore 30
f 1
numero word 1
bram 00002039f00000000F810000000240000008100000002400000081000000024000000810000000240000008100000002400000081000000024000000810000000240000008
numero frame 30
numero frame -i 0
offset 988
contatore 30
f 0
numero word 0
bram 00002039f00000000F81000000024000000810000000240000008100000002400000081000000024000000810000000240000008100000002400000081000000024000000810000000
numero frame 31
numero frame -i 1
offset 993
contatore 31
f 1
numero word 1
bram 00002039f00000000F810000000240000008100000002400000081000000024000000810000000240000008100000002400000081000000024000000810000000240000008100000002
numero frame 31
numero frame -i 0
offset 1018
contatore 31
f 0
numero word 0
bram 00002039f00000000F8100000002400000081000000024000000810000000240000008100000002400000081000000024000000810000000240000008100000002400000081000000024000000
0
byte 00002039f
par 0
word 0
par 0
word 0
par 2
word 100
par 3
word 19F
word modificata con parità 30000019F
9
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
18
byte 810000000
par 8
word 2000000
par 8
word 2000000
par 8
word 2000000
par 8
word 2000000
word modificata con parità 802000000
27
byte 240000008
par 0
word 48000000
par 0
word 48000000
par 0
word 48000000
par 0
word 48000008
word modificata con parità 048000008
36
byte 100000002
par 0
word 20000000
par 0
word 20000000
par 0
word 20000000
par 0
word 20000002
word modificata con parità 020000002
45
byte 400000081
par 0
word 80000000
par 0
word 80000000
par 0
word 80000000
par 0
word 80000081
word modificata con parità 080000081
54
byte 000000024
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 24
word modificata con parità 000000024
63
byte 000000810
par 0
word 0
par 0
word 0
par 0
word 400
par 0
word 410
word modificata con parità 000000410
72
byte 000000240
par 0
word 0
par 0
word 0
par 0
word 100
par 0
word 140
word modificata con parità 000000140
81
byte 000008100
par 0
word 0
par 0
word 0
par 0
word 4000
par 1
word 4000
word modificata con parità 100004000
90
byte 000002400
par 0
word 0
par 0
word 0
par 0
word 1200
par 0
word 1200
word modificata con parità 000001200
99
byte 000081000
par 0
word 0
par 0
word 20000
par 0
word 20800
par 0
word 20800
word modificata con parità 000020800
108
byte 000024000
par 0
word 0
par 0
word 0
par 2
word 2000
par 2
word 2000
word modificata con parità 200002000
117
byte 000810000
par 0
word 0
par 0
word 200000
par 0
word 208000
par 0
word 208000
word modificata con parità 000208000
126
byte 000240000
par 0
word 0
par 0
word 90000
par 0
word 90000
par 0
word 90000
word modificata con parità 000090000
135
byte 008100000
par 0
word 1000000
par 0
word 1040000
par 0
word 1040000
par 0
word 1040000
word modificata con parità 001040000
144
byte 002400000
par 0
word 0
par 0
word 900000
par 0
word 900000
par 0
word 900000
word modificata con parità 000900000
153
byte 000000000
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 0
word modificata con parità 000000000
162
byte F00000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
word modificata con parità 8E0000000
171
byte F00000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
word modificata con parità 8E0000000
180
byte F00000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
word modificata con parità 8E0000000
189
byte F00000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
word modificata con parità 8E0000000
198
byte F00000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
word modificata con parità 8E0000000
207
byte F00000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
par 8
word E0000000
word modificata con parità 8E0000000
216
byte 4
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 4
word modificata con parità 000000004
30000019F00000000F8020000000480000080200000020800000810000000240000004100000001401000040000000012000000208002000020000002080000000900000010400000009000000000000008E00000008E00000008E00000008E00000008E00000008E0000000000000004
lunghezza 225
[{}]
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			puts "f $f"
# 			if {$offset<=[expr $i*32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 				
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					set word [expr $word | $sec_word] 
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 1
can't read "word": no such variable
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			puts "f [expr $i*32] "
# 			if {$offset<=[expr $i*32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr 1 << [expr $offset % 32]]
# 					append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 				
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					set sec_word [expr 1 << [expr $offset % 32]]
# 					set word [expr $word | $sec_word] 
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 512 
can't read "word": no such variable
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		foreach offset [dict get $mydict $frame] { 
# 
# 			
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			puts "f [expr $i*32] "
# 			if {$offset<=[expr $i*32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} else {
# 					
# 				
# 					#questa or mi permette di mettere più offset nella stessa maschera
# 					#puts $word
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					append bram [format %X [expr $word]]
# 					#append bram [format %X [expr $offset % 32]]
# 					#append bram " "
# 				}
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 512 
can't read "word": no such variable
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts lindex offset 0
# 		foreach offset [dict get $mydict $frame] { 
# 
# 				
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			puts "f [expr $i*32] "
# 			if {$offset<=[expr $i*32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					if {[expr word]==0} {
# 						set word [expr 1 << [expr $offset % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} 
# 				e
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
wrong # args: should be "puts ?-nonewline? ?channelId? string"
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		foreach offset [dict get $mydict $frame] { 
# 
# 				
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			puts "f [expr $i*32] "
# 			if {$offset<=[expr $i*32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					if {[expr word]==0} {
# 						set word [expr 1 << [expr $offset % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} 
# 				e
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 512 
invalid command name "e"
ambiguous command name "e": enable_beta_device encoding encrypt encrypt_package endgroup eof error eval exec exit export_as_example_design export_bd_synth export_ip_user_files export_simulation expr extract_files
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		while {$num_frame<[llength $offset]} { 
# 
# 				
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			puts "f [expr $i*32] "
# 			if {$offset<=[expr $i*32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					if {[expr word]==0} {
# 						set word [expr 1 << [expr $offset % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} 
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
missing operator at _@_
in expression "515 _@_540 545 570 579 604 60..."
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		puts[llength $offset]
# 		while {$num_frame<[llength $offset]} { 
# 
# 				
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			puts "f [expr $i*32] "
# 			if {$offset<=[expr $i*32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					if {[expr word]==0} {
# 						set word [expr 1 << [expr $offset % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} 
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
invalid command name "puts32"
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		puts [llength $offset]
# 		while {$num_frame<[llength $offset]} { 
# 
# 				
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			puts "f [expr $i*32] "
# 			if {$offset<=[expr $i*32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					if {[expr word]==0} {
# 						set word [expr 1 << [expr $offset % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} 
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
32
missing operator at _@_
in expression "515 _@_540 545 570 579 604 60..."
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		puts [llength $offset]
# 		while { $num_frame< [llength $offset] } { 
# 
# 				
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			puts "f [expr $i*32] "
# 			if {$offset<=[expr $i*32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					if {[expr word]==0} {
# 						set word [expr 1 << [expr $offset % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} 
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
32
missing operator at _@_
in expression "515 _@_540 545 570 579 604 60..."
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		puts [llength $offset]
# 		while { $num_frame< [llength $offset] } { 
# 
# 				
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			puts "f [expr $i*32] "
# 			if {$offset<=[expr $i*32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					if {[expr word]==0} {
# 						set word [expr 1 << [expr $offset % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} 
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
32
missing operator at _@_
in expression "515 _@_540 545 570 579 604 60..."
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		puts [llength $offset]
# 		while { $num_frame< [llength $offset] } { 
# 
# 				
# 			set f [expr $offset / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			puts "f [expr $i*32] "
# 			if {$offset<=[expr $i*32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					if {[expr word]==0} {
# 						set word [expr 1 << [expr $offset % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} 
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
32
missing operator at _@_
in expression "515 _@_540 545 570 579 604 60..."
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			puts "f [expr $i*32] "
# 			if {$offset<=[expr $i*32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					if {[expr word]==0} {
# 						set word [expr 1 << [expr $offset % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} 
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
contatore 16
f 512 
numero word 1
bram 00002039f00000000F
numero frame 16
numero frame -i 0
offset 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
contatore 16
f 512 
numero word 0
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
contatore 17
f 544 
invalid bareword "word"
in expression "word";
should be "$word" or "{word}" or "word(...)" or ...
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset $offset"
# 			puts "contatore $i"
# 			puts "f [expr $i*32] "
# 			if {$offset<=[expr $i*32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					if {[expr word]==0} {
# 						set word [expr 1 << [expr $offset % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set stessa_word 1
# 				} 
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
contatore 16
f 512 
numero word 1
bram 00002039f00000000F
numero frame 16
numero frame -i 0
offset 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
contatore 16
f 512 
numero word 0
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
contatore 17
f 544 
invalid bareword "word"
in expression "word";
should be "$word" or "{word}" or "word(...)" or ...
c_r/
0
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32] "
# 			if {$offset<=[expr $i*32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					if {[expr word]==0} {
# 						set word [expr 1 << [expr $offset % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					
# 				} 
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 512 
numero word 1
bram 00002039f00000000F
numero frame 16
numero frame -i 0
offset 540
contatore 16
f 512 
numero word 0
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 545
contatore 17
f 544 
invalid bareword "word"
in expression "word";
should be "$word" or "{word}" or "word(...)" or ...
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32] "
# 			while {$offset<=[expr $i*32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					if {[expr word]==0} {
# 						set word [expr 1 << [expr $offset % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					set offset [lindex $offset $num_frame]
# 					
# 				} 
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 512 
numero word 1
bram 00002039f00000000F
numero frame 16
numero frame -i 0
offset 540
contatore 16
f 512 
numero word 0
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 545
contatore 17
f 544 
invalid bareword "word"
in expression "word";
should be "$word" or "{word}" or "word(...)" or ...
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {$offset<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					if {[expr word]==0} {
# 						set word [expr 1 << [expr $offset % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					set offset [lindex $offset $num_frame]
# 					
# 				} 
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
invalid bareword "word"
in expression "word";
should be "$word" or "{word}" or "word(...)" or ...
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {$offset<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $offset % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					set offset [lindex $offset $num_frame]
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
missing operator at _@_
in expression "515 _@_540 545 570 579 604 60..."
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {$offset<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $offset % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $offset % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					set offset [lindex $offset $num_frame]
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
missing operator at _@_
in expression "515 _@_540 545 570 579 604 60..."
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {$offset<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr [lindex $offset $num_frame] % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr [lindex $offset $num_frame] % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					set offset [lindex $offset $num_frame]
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
missing operand at _@_
in expression " _@_% 32"
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {$offset<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [lindex $offset $num_frame]
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					set offset [lindex $offset $num_frame]
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
missing operand at _@_
in expression " _@_% 32"
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {$offset<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [lindex $offset $num_frame]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					set offset [lindex $offset $num_frame]
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515

missing operand at _@_
in expression " _@_% 32"
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {$offset<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [lindex $offset $num_frame]
# 					puts [expr $off]
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					set offset [lindex $offset $num_frame]
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {$offset<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts [expr $off]
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					set offset [lindex $offset $num_frame]
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {$offset<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					set offset [lindex $offset $num_frame]
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {$offset<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					set offset [lindex $offset $num_frame]
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {$offset<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						#set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					set offset [lindex $offset $num_frame]
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					set offset [lindex $offset $num_frame]
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					#set num_frame [expr $num_frame +1]
# 					#set offset [lindex $offset $num_frame]
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
515
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					set offset [lindex $offset $num_frame]
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 
# 					set offset [lindex $offset $num_frame]
# 					puts $offset
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
540
empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
540
numero word 1
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 570
contatore 17
f 576 
570
numero word 1
bram 00002039f00000000F
numero frame 18
numero frame -i 1
offset 604
contatore 18
f 608 
604
numero word 1
bram 00002039f00000000F
numero frame 19
numero frame -i 1
offset 634
contatore 19
f 640 
634
numero word 1
bram 00002039f00000000F
numero frame 20
numero frame -i 1
offset 668
contatore 20
f 672 
668
numero word 1
bram 00002039f00000000F
numero frame 21
numero frame -i 1
offset 698
contatore 21
f 704 
698
numero word 1
bram 00002039f00000000F
numero frame 22
numero frame -i 1
offset 732
contatore 22
f 736 
732
numero word 1
bram 00002039f00000000F
numero frame 23
numero frame -i 1
offset 762
contatore 23
f 768 
762
numero word 1
bram 00002039f00000000F
numero frame 24
numero frame -i 1
offset 796
contatore 24
f 800 
796
numero word 1
bram 00002039f00000000F
numero frame 25
numero frame -i 1
offset 826
contatore 25
f 832 
826
numero word 1
bram 00002039f00000000F
numero frame 26
numero frame -i 1
offset 860
contatore 26
f 864 
860
numero word 1
bram 00002039f00000000F
numero frame 27
numero frame -i 1
offset 890
contatore 27
f 896 
890
numero word 1
bram 00002039f00000000F
numero frame 28
numero frame -i 1
offset 924
contatore 28
f 928 
924
numero word 1
bram 00002039f00000000F
numero frame 29
numero frame -i 1
offset 954
contatore 29
f 960 
954
numero word 1
bram 00002039f00000000F
numero frame 30
numero frame -i 1
offset 988
contatore 30
f 992 
988
numero word 1
bram 00002039f00000000F
numero frame 31
numero frame -i 1
offset 1018
contatore 31
f 1024 
1018
empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
540
2
numero word 1
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 570
contatore 17
f 576 
570
4
numero word 1
bram 00002039f00000000F
numero frame 18
numero frame -i 1
offset 604
contatore 18
f 608 
604
6
numero word 1
bram 00002039f00000000F
numero frame 19
numero frame -i 1
offset 634
contatore 19
f 640 
634
8
numero word 1
bram 00002039f00000000F
numero frame 20
numero frame -i 1
offset 668
contatore 20
f 672 
668
10
numero word 1
bram 00002039f00000000F
numero frame 21
numero frame -i 1
offset 698
contatore 21
f 704 
698
12
numero word 1
bram 00002039f00000000F
numero frame 22
numero frame -i 1
offset 732
contatore 22
f 736 
732
14
numero word 1
bram 00002039f00000000F
numero frame 23
numero frame -i 1
offset 762
contatore 23
f 768 
762
16
numero word 1
bram 00002039f00000000F
numero frame 24
numero frame -i 1
offset 796
contatore 24
f 800 
796
18
numero word 1
bram 00002039f00000000F
numero frame 25
numero frame -i 1
offset 826
contatore 25
f 832 
826
20
numero word 1
bram 00002039f00000000F
numero frame 26
numero frame -i 1
offset 860
contatore 26
f 864 
860
22
numero word 1
bram 00002039f00000000F
numero frame 27
numero frame -i 1
offset 890
contatore 27
f 896 
890
24
numero word 1
bram 00002039f00000000F
numero frame 28
numero frame -i 1
offset 924
contatore 28
f 928 
924
26
numero word 1
bram 00002039f00000000F
numero frame 29
numero frame -i 1
offset 954
contatore 29
f 960 
954
28
numero word 1
bram 00002039f00000000F
numero frame 30
numero frame -i 1
offset 988
contatore 30
f 992 
988
30
numero word 1
bram 00002039f00000000F
numero frame 31
numero frame -i 1
offset 1018
contatore 31
f 1024 
1018
32
empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]!="" ||[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
540
2
545
3
570
4
579
5
604
6
609
7
634
8
643
9
668
10
673
11
698
12
707
13
732
14
737
15
762
16
771
17
796
18
801
19
826
20
835
21
860
22
865
23
890
24
899
25
924
26
929
27
954
28
963
29
988
30
993
31
1018
32
empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					if {[lindex $offset $num_frame] eq ""} {
# 						set [lindex $offset $num_frame] [expr $i*32+32+1]
# 					}
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
540
2
numero word 1
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 570
contatore 17
f 576 
570
4
numero word 1
bram 00002039f00000000F
numero frame 18
numero frame -i 1
offset 604
contatore 18
f 608 
604
6
numero word 1
bram 00002039f00000000F
numero frame 19
numero frame -i 1
offset 634
contatore 19
f 640 
634
8
numero word 1
bram 00002039f00000000F
numero frame 20
numero frame -i 1
offset 668
contatore 20
f 672 
668
10
numero word 1
bram 00002039f00000000F
numero frame 21
numero frame -i 1
offset 698
contatore 21
f 704 
698
12
numero word 1
bram 00002039f00000000F
numero frame 22
numero frame -i 1
offset 732
contatore 22
f 736 
732
14
numero word 1
bram 00002039f00000000F
numero frame 23
numero frame -i 1
offset 762
contatore 23
f 768 
762
16
numero word 1
bram 00002039f00000000F
numero frame 24
numero frame -i 1
offset 796
contatore 24
f 800 
796
18
numero word 1
bram 00002039f00000000F
numero frame 25
numero frame -i 1
offset 826
contatore 25
f 832 
826
20
numero word 1
bram 00002039f00000000F
numero frame 26
numero frame -i 1
offset 860
contatore 26
f 864 
860
22
numero word 1
bram 00002039f00000000F
numero frame 27
numero frame -i 1
offset 890
contatore 27
f 896 
890
24
numero word 1
bram 00002039f00000000F
numero frame 28
numero frame -i 1
offset 924
contatore 28
f 928 
924
26
numero word 1
bram 00002039f00000000F
numero frame 29
numero frame -i 1
offset 954
contatore 29
f 960 
954
28
numero word 1
bram 00002039f00000000F
numero frame 30
numero frame -i 1
offset 988
contatore 30
f 992 
988
30
numero word 1
bram 00002039f00000000F
numero frame 31
numero frame -i 1
offset 1018
contatore 31
f 1024 
1018
32
empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					puts [lindex $offset $num_frame] 
# 					if {[lindex $offset $num_frame] eq ""} {
# 						set [lindex $offset $num_frame] [expr $i*32+32+1]
# 					}
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
540
540
2
545
numero word 1
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 570
contatore 17
f 576 
570
4
579
numero word 1
bram 00002039f00000000F
numero frame 18
numero frame -i 1
offset 604
contatore 18
f 608 
604
6
609
numero word 1
bram 00002039f00000000F
numero frame 19
numero frame -i 1
offset 634
contatore 19
f 640 
634
8
643
numero word 1
bram 00002039f00000000F
numero frame 20
numero frame -i 1
offset 668
contatore 20
f 672 
668
10
673
numero word 1
bram 00002039f00000000F
numero frame 21
numero frame -i 1
offset 698
contatore 21
f 704 
698
12
707
numero word 1
bram 00002039f00000000F
numero frame 22
numero frame -i 1
offset 732
contatore 22
f 736 
732
14
737
numero word 1
bram 00002039f00000000F
numero frame 23
numero frame -i 1
offset 762
contatore 23
f 768 
762
16
771
numero word 1
bram 00002039f00000000F
numero frame 24
numero frame -i 1
offset 796
contatore 24
f 800 
796
18
801
numero word 1
bram 00002039f00000000F
numero frame 25
numero frame -i 1
offset 826
contatore 25
f 832 
826
20
835
numero word 1
bram 00002039f00000000F
numero frame 26
numero frame -i 1
offset 860
contatore 26
f 864 
860
22
865
numero word 1
bram 00002039f00000000F
numero frame 27
numero frame -i 1
offset 890
contatore 27
f 896 
890
24
899
numero word 1
bram 00002039f00000000F
numero frame 28
numero frame -i 1
offset 924
contatore 28
f 928 
924
26
929
numero word 1
bram 00002039f00000000F
numero frame 29
numero frame -i 1
offset 954
contatore 29
f 960 
954
28
963
numero word 1
bram 00002039f00000000F
numero frame 30
numero frame -i 1
offset 988
contatore 30
f 992 
988
30
993
numero word 1
bram 00002039f00000000F
numero frame 31
numero frame -i 1
offset 1018
contatore 31
f 1024 
1018
32

empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					puts [string[lindex $offset $num_frame] ]
# 					if {[lindex $offset $num_frame] eq ""} {
# 						set [lindex $offset $num_frame] [expr $i*32+32+1]
# 					}
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
invalid command name "string540"
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					puts [string [lindex $offset $num_frame] ]
# 					if {[lindex $offset $num_frame] eq ""} {
# 						set [lindex $offset $num_frame] [expr $i*32+32+1]
# 					}
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
unknown or ambiguous subcommand "540": must be bytelength, compare, equal, first, index, is, last, length, map, match, range, repeat, replace, reverse, tolower, totitle, toupper, trim, trimleft, trimright, wordend, or wordstart
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					puts [string trimleft [lindex $offset $num_frame] ]
# 					if {[lindex $offset $num_frame] eq ""} {
# 						set [lindex $offset $num_frame] [expr $i*32+32+1]
# 					}
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
540
540
2
545
numero word 1
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 570
contatore 17
f 576 
570
4
579
numero word 1
bram 00002039f00000000F
numero frame 18
numero frame -i 1
offset 604
contatore 18
f 608 
604
6
609
numero word 1
bram 00002039f00000000F
numero frame 19
numero frame -i 1
offset 634
contatore 19
f 640 
634
8
643
numero word 1
bram 00002039f00000000F
numero frame 20
numero frame -i 1
offset 668
contatore 20
f 672 
668
10
673
numero word 1
bram 00002039f00000000F
numero frame 21
numero frame -i 1
offset 698
contatore 21
f 704 
698
12
707
numero word 1
bram 00002039f00000000F
numero frame 22
numero frame -i 1
offset 732
contatore 22
f 736 
732
14
737
numero word 1
bram 00002039f00000000F
numero frame 23
numero frame -i 1
offset 762
contatore 23
f 768 
762
16
771
numero word 1
bram 00002039f00000000F
numero frame 24
numero frame -i 1
offset 796
contatore 24
f 800 
796
18
801
numero word 1
bram 00002039f00000000F
numero frame 25
numero frame -i 1
offset 826
contatore 25
f 832 
826
20
835
numero word 1
bram 00002039f00000000F
numero frame 26
numero frame -i 1
offset 860
contatore 26
f 864 
860
22
865
numero word 1
bram 00002039f00000000F
numero frame 27
numero frame -i 1
offset 890
contatore 27
f 896 
890
24
899
numero word 1
bram 00002039f00000000F
numero frame 28
numero frame -i 1
offset 924
contatore 28
f 928 
924
26
929
numero word 1
bram 00002039f00000000F
numero frame 29
numero frame -i 1
offset 954
contatore 29
f 960 
954
28
963
numero word 1
bram 00002039f00000000F
numero frame 30
numero frame -i 1
offset 988
contatore 30
f 992 
988
30
993
numero word 1
bram 00002039f00000000F
numero frame 31
numero frame -i 1
offset 1018
contatore 31
f 1024 
1018
32

empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					puts [string trimleft [lindex $offset $num_frame] ]
# 					if {[string trimleft [lindex $offset $num_frame] ] eq ""} {
# 						set [lindex $offset $num_frame] [expr $i*32+32+1]
# 					}
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
540
540
2
545
numero word 1
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 570
contatore 17
f 576 
570
4
579
numero word 1
bram 00002039f00000000F
numero frame 18
numero frame -i 1
offset 604
contatore 18
f 608 
604
6
609
numero word 1
bram 00002039f00000000F
numero frame 19
numero frame -i 1
offset 634
contatore 19
f 640 
634
8
643
numero word 1
bram 00002039f00000000F
numero frame 20
numero frame -i 1
offset 668
contatore 20
f 672 
668
10
673
numero word 1
bram 00002039f00000000F
numero frame 21
numero frame -i 1
offset 698
contatore 21
f 704 
698
12
707
numero word 1
bram 00002039f00000000F
numero frame 22
numero frame -i 1
offset 732
contatore 22
f 736 
732
14
737
numero word 1
bram 00002039f00000000F
numero frame 23
numero frame -i 1
offset 762
contatore 23
f 768 
762
16
771
numero word 1
bram 00002039f00000000F
numero frame 24
numero frame -i 1
offset 796
contatore 24
f 800 
796
18
801
numero word 1
bram 00002039f00000000F
numero frame 25
numero frame -i 1
offset 826
contatore 25
f 832 
826
20
835
numero word 1
bram 00002039f00000000F
numero frame 26
numero frame -i 1
offset 860
contatore 26
f 864 
860
22
865
numero word 1
bram 00002039f00000000F
numero frame 27
numero frame -i 1
offset 890
contatore 27
f 896 
890
24
899
numero word 1
bram 00002039f00000000F
numero frame 28
numero frame -i 1
offset 924
contatore 28
f 928 
924
26
929
numero word 1
bram 00002039f00000000F
numero frame 29
numero frame -i 1
offset 954
contatore 29
f 960 
954
28
963
numero word 1
bram 00002039f00000000F
numero frame 30
numero frame -i 1
offset 988
contatore 30
f 992 
988
30
993
numero word 1
bram 00002039f00000000F
numero frame 31
numero frame -i 1
offset 1018
contatore 31
f 1024 
1018
32

empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					puts [string trimleft [lindex $offset $num_frame] ]
# 					if {[string trimleft [lindex $offset $num_frame] "\n"] eq ""} {
# 						set [lindex $offset $num_frame] [expr $i*32+32+1]
# 					}
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
540
540
2
545
numero word 1
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 570
contatore 17
f 576 
570
4
579
numero word 1
bram 00002039f00000000F
numero frame 18
numero frame -i 1
offset 604
contatore 18
f 608 
604
6
609
numero word 1
bram 00002039f00000000F
numero frame 19
numero frame -i 1
offset 634
contatore 19
f 640 
634
8
643
numero word 1
bram 00002039f00000000F
numero frame 20
numero frame -i 1
offset 668
contatore 20
f 672 
668
10
673
numero word 1
bram 00002039f00000000F
numero frame 21
numero frame -i 1
offset 698
contatore 21
f 704 
698
12
707
numero word 1
bram 00002039f00000000F
numero frame 22
numero frame -i 1
offset 732
contatore 22
f 736 
732
14
737
numero word 1
bram 00002039f00000000F
numero frame 23
numero frame -i 1
offset 762
contatore 23
f 768 
762
16
771
numero word 1
bram 00002039f00000000F
numero frame 24
numero frame -i 1
offset 796
contatore 24
f 800 
796
18
801
numero word 1
bram 00002039f00000000F
numero frame 25
numero frame -i 1
offset 826
contatore 25
f 832 
826
20
835
numero word 1
bram 00002039f00000000F
numero frame 26
numero frame -i 1
offset 860
contatore 26
f 864 
860
22
865
numero word 1
bram 00002039f00000000F
numero frame 27
numero frame -i 1
offset 890
contatore 27
f 896 
890
24
899
numero word 1
bram 00002039f00000000F
numero frame 28
numero frame -i 1
offset 924
contatore 28
f 928 
924
26
929
numero word 1
bram 00002039f00000000F
numero frame 29
numero frame -i 1
offset 954
contatore 29
f 960 
954
28
963
numero word 1
bram 00002039f00000000F
numero frame 30
numero frame -i 1
offset 988
contatore 30
f 992 
988
30
993
numero word 1
bram 00002039f00000000F
numero frame 31
numero frame -i 1
offset 1018
contatore 31
f 1024 
1018
32

empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					puts [string trimleft [lindex $offset $num_frame] ]
# 					if {{string trimleft [lindex $offset $num_frame] "\n"} eq ""} {
# 						set [lindex $offset $num_frame] [expr $i*32+32+1]
# 					}
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
540
540
2
545
numero word 1
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 570
contatore 17
f 576 
570
4
579
numero word 1
bram 00002039f00000000F
numero frame 18
numero frame -i 1
offset 604
contatore 18
f 608 
604
6
609
numero word 1
bram 00002039f00000000F
numero frame 19
numero frame -i 1
offset 634
contatore 19
f 640 
634
8
643
numero word 1
bram 00002039f00000000F
numero frame 20
numero frame -i 1
offset 668
contatore 20
f 672 
668
10
673
numero word 1
bram 00002039f00000000F
numero frame 21
numero frame -i 1
offset 698
contatore 21
f 704 
698
12
707
numero word 1
bram 00002039f00000000F
numero frame 22
numero frame -i 1
offset 732
contatore 22
f 736 
732
14
737
numero word 1
bram 00002039f00000000F
numero frame 23
numero frame -i 1
offset 762
contatore 23
f 768 
762
16
771
numero word 1
bram 00002039f00000000F
numero frame 24
numero frame -i 1
offset 796
contatore 24
f 800 
796
18
801
numero word 1
bram 00002039f00000000F
numero frame 25
numero frame -i 1
offset 826
contatore 25
f 832 
826
20
835
numero word 1
bram 00002039f00000000F
numero frame 26
numero frame -i 1
offset 860
contatore 26
f 864 
860
22
865
numero word 1
bram 00002039f00000000F
numero frame 27
numero frame -i 1
offset 890
contatore 27
f 896 
890
24
899
numero word 1
bram 00002039f00000000F
numero frame 28
numero frame -i 1
offset 924
contatore 28
f 928 
924
26
929
numero word 1
bram 00002039f00000000F
numero frame 29
numero frame -i 1
offset 954
contatore 29
f 960 
954
28
963
numero word 1
bram 00002039f00000000F
numero frame 30
numero frame -i 1
offset 988
contatore 30
f 992 
988
30
993
numero word 1
bram 00002039f00000000F
numero frame 31
numero frame -i 1
offset 1018
contatore 31
f 1024 
1018
32

empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					puts [string trimleft [lindex $offset $num_frame] ]
# 					if { [lindex $offset $num_frame]  eq "\n"} {
# 						set [lindex $offset $num_frame] [expr $i*32+32+1]
# 					}
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
540
540
2
545
numero word 1
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 570
contatore 17
f 576 
570
4
579
numero word 1
bram 00002039f00000000F
numero frame 18
numero frame -i 1
offset 604
contatore 18
f 608 
604
6
609
numero word 1
bram 00002039f00000000F
numero frame 19
numero frame -i 1
offset 634
contatore 19
f 640 
634
8
643
numero word 1
bram 00002039f00000000F
numero frame 20
numero frame -i 1
offset 668
contatore 20
f 672 
668
10
673
numero word 1
bram 00002039f00000000F
numero frame 21
numero frame -i 1
offset 698
contatore 21
f 704 
698
12
707
numero word 1
bram 00002039f00000000F
numero frame 22
numero frame -i 1
offset 732
contatore 22
f 736 
732
14
737
numero word 1
bram 00002039f00000000F
numero frame 23
numero frame -i 1
offset 762
contatore 23
f 768 
762
16
771
numero word 1
bram 00002039f00000000F
numero frame 24
numero frame -i 1
offset 796
contatore 24
f 800 
796
18
801
numero word 1
bram 00002039f00000000F
numero frame 25
numero frame -i 1
offset 826
contatore 25
f 832 
826
20
835
numero word 1
bram 00002039f00000000F
numero frame 26
numero frame -i 1
offset 860
contatore 26
f 864 
860
22
865
numero word 1
bram 00002039f00000000F
numero frame 27
numero frame -i 1
offset 890
contatore 27
f 896 
890
24
899
numero word 1
bram 00002039f00000000F
numero frame 28
numero frame -i 1
offset 924
contatore 28
f 928 
924
26
929
numero word 1
bram 00002039f00000000F
numero frame 29
numero frame -i 1
offset 954
contatore 29
f 960 
954
28
963
numero word 1
bram 00002039f00000000F
numero frame 30
numero frame -i 1
offset 988
contatore 30
f 992 
988
30
993
numero word 1
bram 00002039f00000000F
numero frame 31
numero frame -i 1
offset 1018
contatore 31
f 1024 
1018
32

empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					puts  [lindex $offset $num_frame]
# 					if { [lindex $offset $num_frame]  is null } {
# 						set [lindex $offset $num_frame] [expr $i*32+32+1]
# 					}
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
540
invalid bareword "is"
in expression "... $offset $num_frame]  is null ";
should be "$is" or "{is}" or "is(...)" or ...
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					puts  [lindex $offset $num_frame]
# 					if {[null [lindex $offset $num_frame]]  } {
# 						set [lindex $offset $num_frame] [expr $i*32+32+1]
# 					}
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
540
invalid command name "null"
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					puts  [lindex $offset $num_frame]
# 					if { [lindex $offset $num_frame] eq " \n"  } {
# 						set [lindex $offset $num_frame] [expr $i*32+32+1]
# 					}
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
540
540
2
545
numero word 1
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 570
contatore 17
f 576 
570
4
579
numero word 1
bram 00002039f00000000F
numero frame 18
numero frame -i 1
offset 604
contatore 18
f 608 
604
6
609
numero word 1
bram 00002039f00000000F
numero frame 19
numero frame -i 1
offset 634
contatore 19
f 640 
634
8
643
numero word 1
bram 00002039f00000000F
numero frame 20
numero frame -i 1
offset 668
contatore 20
f 672 
668
10
673
numero word 1
bram 00002039f00000000F
numero frame 21
numero frame -i 1
offset 698
contatore 21
f 704 
698
12
707
numero word 1
bram 00002039f00000000F
numero frame 22
numero frame -i 1
offset 732
contatore 22
f 736 
732
14
737
numero word 1
bram 00002039f00000000F
numero frame 23
numero frame -i 1
offset 762
contatore 23
f 768 
762
16
771
numero word 1
bram 00002039f00000000F
numero frame 24
numero frame -i 1
offset 796
contatore 24
f 800 
796
18
801
numero word 1
bram 00002039f00000000F
numero frame 25
numero frame -i 1
offset 826
contatore 25
f 832 
826
20
835
numero word 1
bram 00002039f00000000F
numero frame 26
numero frame -i 1
offset 860
contatore 26
f 864 
860
22
865
numero word 1
bram 00002039f00000000F
numero frame 27
numero frame -i 1
offset 890
contatore 27
f 896 
890
24
899
numero word 1
bram 00002039f00000000F
numero frame 28
numero frame -i 1
offset 924
contatore 28
f 928 
924
26
929
numero word 1
bram 00002039f00000000F
numero frame 29
numero frame -i 1
offset 954
contatore 29
f 960 
954
28
963
numero word 1
bram 00002039f00000000F
numero frame 30
numero frame -i 1
offset 988
contatore 30
f 992 
988
30
993
numero word 1
bram 00002039f00000000F
numero frame 31
numero frame -i 1
offset 1018
contatore 31
f 1024 
1018
32

empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			while {[lindex $offset $num_frame]<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					set off [expr [lindex $offset $num_frame]]
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					puts  [lindex $offset $num_frame]
# 					if { $num_frame >=31  } {
# 						set [lindex $offset $num_frame] [expr $i*32+32+1]
# 					}
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
540
540
2
545
numero word 1
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 570
contatore 17
f 576 
570
4
579
numero word 1
bram 00002039f00000000F
numero frame 18
numero frame -i 1
offset 604
contatore 18
f 608 
604
6
609
numero word 1
bram 00002039f00000000F
numero frame 19
numero frame -i 1
offset 634
contatore 19
f 640 
634
8
643
numero word 1
bram 00002039f00000000F
numero frame 20
numero frame -i 1
offset 668
contatore 20
f 672 
668
10
673
numero word 1
bram 00002039f00000000F
numero frame 21
numero frame -i 1
offset 698
contatore 21
f 704 
698
12
707
numero word 1
bram 00002039f00000000F
numero frame 22
numero frame -i 1
offset 732
contatore 22
f 736 
732
14
737
numero word 1
bram 00002039f00000000F
numero frame 23
numero frame -i 1
offset 762
contatore 23
f 768 
762
16
771
numero word 1
bram 00002039f00000000F
numero frame 24
numero frame -i 1
offset 796
contatore 24
f 800 
796
18
801
numero word 1
bram 00002039f00000000F
numero frame 25
numero frame -i 1
offset 826
contatore 25
f 832 
826
20
835
numero word 1
bram 00002039f00000000F
numero frame 26
numero frame -i 1
offset 860
contatore 26
f 864 
860
22
865
numero word 1
bram 00002039f00000000F
numero frame 27
numero frame -i 1
offset 890
contatore 27
f 896 
890
24
899
numero word 1
bram 00002039f00000000F
numero frame 28
numero frame -i 1
offset 924
contatore 28
f 928 
924
26
929
numero word 1
bram 00002039f00000000F
numero frame 29
numero frame -i 1
offset 954
contatore 29
f 960 
954
28
963
numero word 1
bram 00002039f00000000F
numero frame 30
numero frame -i 1
offset 988
contatore 30
f 992 
988
30
993
numero word 1
bram 00002039f00000000F
numero frame 31
numero frame -i 1
offset 1018
contatore 31
f 1024 
1018
32

empty expression
in expression ""
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			set off [expr [lindex $offset $num_frame]]
# 			while {$off<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					set off [lindex $offset $num_frame]
# 					puts  [lindex $offset $num_frame]
# 					if { $num_frame >=31  } {
# 						set off [expr $i*32+32+1]
# 					}
# 					set stessa_word 1
# 				} 
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
540
540
2
545
numero word 1
bram 00002039f00000000F
numero frame 17
numero frame -i 1
offset 570
contatore 17
f 576 
570
4
579
numero word 1
bram 00002039f00000000F
numero frame 18
numero frame -i 1
offset 604
contatore 18
f 608 
604
6
609
numero word 1
bram 00002039f00000000F
numero frame 19
numero frame -i 1
offset 634
contatore 19
f 640 
634
8
643
numero word 1
bram 00002039f00000000F
numero frame 20
numero frame -i 1
offset 668
contatore 20
f 672 
668
10
673
numero word 1
bram 00002039f00000000F
numero frame 21
numero frame -i 1
offset 698
contatore 21
f 704 
698
12
707
numero word 1
bram 00002039f00000000F
numero frame 22
numero frame -i 1
offset 732
contatore 22
f 736 
732
14
737
numero word 1
bram 00002039f00000000F
numero frame 23
numero frame -i 1
offset 762
contatore 23
f 768 
762
16
771
numero word 1
bram 00002039f00000000F
numero frame 24
numero frame -i 1
offset 796
contatore 24
f 800 
796
18
801
numero word 1
bram 00002039f00000000F
numero frame 25
numero frame -i 1
offset 826
contatore 25
f 832 
826
20
835
numero word 1
bram 00002039f00000000F
numero frame 26
numero frame -i 1
offset 860
contatore 26
f 864 
860
22
865
numero word 1
bram 00002039f00000000F
numero frame 27
numero frame -i 1
offset 890
contatore 27
f 896 
890
24
899
numero word 1
bram 00002039f00000000F
numero frame 28
numero frame -i 1
offset 924
contatore 28
f 928 
924
26
929
numero word 1
bram 00002039f00000000F
numero frame 29
numero frame -i 1
offset 954
contatore 29
f 960 
954
28
963
numero word 1
bram 00002039f00000000F
numero frame 30
numero frame -i 1
offset 988
contatore 30
f 992 
988
30
993
numero word 1
bram 00002039f00000000F
numero frame 31
numero frame -i 1
offset 1018
contatore 31
f 1024 
1018
32

numero word 1
bram 00002039f00000000F
0
byte 00002039f
par 0
word 0
par 0
word 0
par 2
word 100
par 3
word 19F
word modificata con parità 30000019F
9
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
18
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
27
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
36
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
45
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
54
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
63
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
72
byte 000000004
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 4
word modificata con parità 000000004
30000019F00000000F00000000F00000000F00000000F00000000F00000000F00000000F000000004
lunghezza 81
[{}]
source /home/saverio/Scrivania/tesi/script/trovare_indirizzi_in_ll.tcl
# proc swap_half_word {data} { 
# 	set new_data ""
# 	for {set x 0} {$x<[string length $data]} {incr x 2} {
# 		append new_data [string range $data  $x+1 $x+1]
# 		append new_data [string range $data  $x $x]
# 	}
# 	return $new_data
# }
# proc searchinfile {filename component} {
# 	set mydict [dict create] 
# 	#uso dizionario perchè ad ogni frame (chiave) do più valori
# 	puts $component
# 	set file [open $filename]
# 	while {[gets $file line] != -1} {
# 	    if {[regexp "$component" $line all value]} {
# 	        
# 	        set line [string map {" " ""} $line]
# 	        #puts $line
# 	        set pos [string first 0x $line] 
# 	        set frame "0"
# 	        append frame [string range $line $pos+2 $pos+9] 
# 	        puts "frame $frame"
# 	        # prendo il frame
# 	        set offset ""
# 	        set i 10
# 	        set check_number [string range $line $pos+$i $pos+$i]
# 	        #questo while mi serve per prendere i valori di offset dopo il frame, perchè dopo offset ho carattere
# 	        #l'offset presente nel .ll
# 	        while {[string is integer $check_number]} { 
# 	        	set i [expr {$i + 1}]
# 	        	#puts $check_number
# 	        	append offset $check_number
# 	        	set check_number [string range $line $pos+$i $pos+$i]
# 	        }
# 	        append offset " "
# 	        #puts $offset
# 	        dict append mydict $frame $offset 
# 	    }
# 	} 
# 	#puts [dict get $mydict $frame]
# 	set bram ""
# 	#per ogni frame calcolo salto degli offset
# 	foreach frame [dict keys $mydict]  { 
# 		append bram $frame
# 		#append bram "\n"
# 		#append bram " "
# 		#append bram 00000000
# 		#append bram " "
# 		set i 0
# 		set f 0
# 		set num_frame 0
# 		set frame_da_saltare -1
# 		puts "prima bram $bram"
# 		set stessa_word 0
# 		#array set offset {}
# 		puts "dict [dict get $mydict $frame]"
# 		# per ogni offset vedo quanti salti ci sono
# 		set offset [dict get $mydict $frame]
# 		puts [lindex $offset 0]
# 		set numero_frame [llength $offset]
# 		while { $num_frame< $numero_frame } { 
# 				
# 			set f [expr [lindex $offset $num_frame] / 32]
# 			puts "numero frame $f"
# 			set f [expr $f-$i]
# 			puts "numero frame -i $f"
# 			set i [expr $i+$f ]
# 			while {$f-1 >0} {
# 				set stessa_word 0
# 				puts "qui"
# 				if {$f-1 >=15} {
# 					append bram 00000000F 
# 					set f [expr $f -15]
# 					
# 				} else {
# 					append bram 00000000
# 					append bram [format %X $f] 
# 					
# 				}
# 				
# 			}
# 			puts "offset [lindex $offset $num_frame]"
# 			puts "contatore $i"
# 			puts "f [expr $i*32+32] "
# 			set off [expr [lindex $offset $num_frame]]
# 			while {$off<=[expr $i*32+32] } {
# 					#append bram " salto"
# 					#append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					#puts "frame_da_saltare $frame_da_saltare"
# 					#set frame_da_saltare -1
# 					#append bram "word"
# 					
# 					puts $off
# 					if {$stessa_word==0} {
# 						set word [expr 1 << [expr $off % 32]]
# 					} else {
# 					set word [expr $word | [expr 1 << [expr $off % 32]]]
# 					}
# 					#append bram [format %X [expr $word]]
# 					#puts "word $word"
# 					#append bram [format %X [expr $offset % 32]]
# 					#puts [format %x [expr $offset % 32]]
# 					#append bram " "
# 					set num_frame [expr $num_frame +1]
# 					puts $num_frame
# 					set off [lindex $offset $num_frame]
# 					puts  [lindex $offset $num_frame]
# 					if { $num_frame >=31  } {
# 						set off [expr $i*32+32+1]
# 					}
# 					set stessa_word 1
# 				} 
# 				append bram [format %X [expr $word]]
# 				set stessa_word 0
# 				set num_frame [expr $num_frame +1]
# 				
# 
# 			puts "numero word $f"
# 			puts "bram $bram"
# 			
# 			
# 			# while {$i<$offset} {
# 			# 		if {$stessa_word ==1} {
# 			# 			set stessa_word 0
# 			# 			#append bram "word"
# 			# 			append bram [format %08X $word]
# 			# 			#puts "word [format %X $word] "
# 			# 		}
# 			# 		#al massimo saltiamo 15 frame
# 			# 		if {$frame_da_saltare<15} {
# 			# 			set i [expr {$i + 32}]
# 			# 			set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 			# 			puts "qui $frame_da_saltare"
# 
# 
# 			# 		} else {
# 			# 			#append bram " salto"
# 			# 			set i [expr {$i + 32}]
# 			# 			append bram 00000000 
# 			# 			#append bram [format %X $frame_da_saltare] 
# 			# 			#append bram " "
# 						
# 			# 			#append bram " "
# 						
# 			# 			#set frame_da_saltare -1
# 						
# 			# 		}
# 			# 	}
# 
# 			# 	#questo if mi serve per capire se all' interno di una maschera devo mettere più uno
# 			# 	#poichè può darsi che due offset siano nella stessa word
# 				
# 
# 			# 	if {$stessa_word ==0} {
# 			# 		#append bram " salto"
# 			# 		append bram [format %X $frame_da_saltare] 
# 			# 		#append bram " "
# 			# 		puts "frame_da_saltare $frame_da_saltare"
# 			# 		set frame_da_saltare -1
# 			# 		#append bram "word"
# 			# 		set word [expr 1 << [expr $offset % 32]]
# 			# 		#puts "word $word"
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#puts [format %x [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 		set f [expr {$f +1 }]
# 			# 		set stessa_word 1
# 			# 	} else {
# 					
# 			# 		set sec_word [expr 1 << [expr $offset % 32]]
# 			# 		#puts $sec_word
# 			# 		#puts "seconda word $sec_word" 
# 			# 		set f [expr {$f + 1}]
# 			# 		set word [expr $word | $sec_word] 
# 			# 		#questa or mi permette di mettere più offset nella stessa maschera
# 			# 		#puts $word
# 			# 		#append bram [format %X [expr $offset % 32]]
# 			# 		#append bram " "
# 			# 	}
# 			# puts "numero word $f"
# 			# puts "bram $bram"
# 			
# 		}
# 		#puts $i
# 		#puts "f_s $frame_da_saltare"
# 		#riempio di salti e zero fino a che non riempio il frame
# 		while {$i<3232} {
# 				
# 				if {$frame_da_saltare<15} {
# 					set i [expr {$i + 32}]
# 					set frame_da_saltare [expr {$frame_da_saltare + 1}]
# 					#puts "qui $frame_da_saltare"
# 
# 				} else {
# 					#append bram "word "
# 					append bram 00000000 
# 					#append bram " "
# 					#append bram " salto"
# 					append bram [format %X $frame_da_saltare] 
# 					#append bram " "
# 					
# 					
# 					set frame_da_saltare -1
# 					#puts $i
# 					#puts $frame_da_saltare
# 				}
# 			}
# 			#se non ho scritto l' ultimo salto
# 			if {$frame_da_saltare!=0} {
# 				#append bram "word "
# 				append bram 00000000 
# 				#append bram " "
# 				#append bram " salto"
# 				append bram [format %X $frame_da_saltare] 
# 				#append bram $frame_da_saltare
# 				#append bram " "
# 				set frame_da_saltare -1
# 			}
# 			#puts $i
# 			set i 0
# 			append bram "               "
# 	}
# 	#puts $bram
# 	#set bram [swap_half_word $bram]
# 	#puts $bram
# 	close $file
# 
# 	set bram [string map {" " ""} $bram]
# 	set bram [get_parity $bram]
# 	puts $bram
# 	puts "lunghezza [string length $bram]"
# 	set f "/home/saverio/Scrivania/tesi/script/bram/test.mem"
# 	set fileId [open $f w]
# 	puts $fileId "@00000000"
# 	#scrivo i dati a word di 32 bit altrimenti il file .mem non li riconosce
# 	for {set x 0} {$x<[string length $bram]-8} {incr x 9} {
# 		
# 		puts $fileId [string range $bram $x $x+8]
# 	}
# 	set l_s [string range $bram $x end]
# 	#aggiungo zeri per far si di avere una word da 32
# 	#for {set x [string length $l_s]} {$x<9} {incr x } {
# 	#	append l_s 0
# 	#}
# 	puts $fileId $l_s
# 	close $fileId
# 	
# }
# proc search_for_frame {filename} {
#  [searchinfile $filename "c_r/"]
#  #[get_parity "FFFFFFFFA"]
# }
# proc get_parity {byte_string} {
# 	set par "0"
# 	set word "0"
# 	set parmask 800000000
# 	set bytemask 7F8000000
# 	set data ""
# 	for {set i 0} {$i<[expr [string length $byte_string]]} {incr i 9} {
# 		puts $i
# 		set byte [string range $byte_string $i $i+8]
# 		puts "byte $byte"
# 		for {set x 0} {$x<4} {incr x} {
# 		set par [expr $par |  [string range [format %X [expr [expr 0x$byte & [expr 0x$parmask>>$x*9]] <<9*$x+1+(3-$x)  ] ] 0 0]]
# 		puts "par $par"
# 		#puts [format %X [expr 0x$parmask>>$x*9]]
# 		#puts [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]]
# 		#puts [string range [format %X [expr [expr 0x$byte_string & [expr 0x$parmask>>$x*9]] << 9*$x+1+$x]] 0 0] 
# 		
# 			set word [expr $word | [expr 0x$byte & [expr 0x$bytemask >>$x*9]]>>3-$x ]
# 		
# 		
# 		puts "word [format %X  $word ]"
# 		}
# 		#set par [format %b $par]
# 		set par [format %X $par]
# 		set word [format %X  $word ] 
# 		while {[string length $word]<8} {
# 			set word "0$word"
# 		}
# 		
# 		append par $word
# 		puts "word modificata con parità $par"
# 		append data $par
# 		set par "0"
# 		set word "0"
# 	}
# 	return $data
# 	
# }
search_for_frame /home/saverio/Scrivania/codice_tesi/gestore_checkpoint/gestore_checkpoint.runs/impl_1/gestore_checkpoint.ll
c_r/
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
frame 00002039f
prima bram 00002039f
dict 515 540 545 570 579 604 609 634 643 668 673 698 707 732 737 762 771 796 801 826 835 860 865 890 899 924 929 954 963 988 993 1018 
515
numero frame 16
numero frame -i 16
qui
offset 515
contatore 16
f 544 
515
1
540
540
2
545
numero word 1
bram 00002039f00000000F10000008
numero frame 17
numero frame -i 1
offset 570
contatore 17
f 576 
570
4
579
numero word 1
bram 00002039f00000000F100000084000000
numero frame 18
numero frame -i 1
offset 604
contatore 18
f 608 
604
6
609
numero word 1
bram 00002039f00000000F10000008400000010000000
numero frame 19
numero frame -i 1
offset 634
contatore 19
f 640 
634
8
643
numero word 1
bram 00002039f00000000F100000084000000100000004000000
numero frame 20
numero frame -i 1
offset 668
contatore 20
f 672 
668
10
673
numero word 1
bram 00002039f00000000F10000008400000010000000400000010000000
numero frame 21
numero frame -i 1
offset 698
contatore 21
f 704 
698
12
707
numero word 1
bram 00002039f00000000F100000084000000100000004000000100000004000000
numero frame 22
numero frame -i 1
offset 732
contatore 22
f 736 
732
14
737
numero word 1
bram 00002039f00000000F10000008400000010000000400000010000000400000010000000
numero frame 23
numero frame -i 1
offset 762
contatore 23
f 768 
762
16
771
numero word 1
bram 00002039f00000000F100000084000000100000004000000100000004000000100000004000000
numero frame 24
numero frame -i 1
offset 796
contatore 24
f 800 
796
18
801
numero word 1
bram 00002039f00000000F10000008400000010000000400000010000000400000010000000400000010000000
numero frame 25
numero frame -i 1
offset 826
contatore 25
f 832 
826
20
835
numero word 1
bram 00002039f00000000F100000084000000100000004000000100000004000000100000004000000100000004000000
numero frame 26
numero frame -i 1
offset 860
contatore 26
f 864 
860
22
865
numero word 1
bram 00002039f00000000F10000008400000010000000400000010000000400000010000000400000010000000400000010000000
numero frame 27
numero frame -i 1
offset 890
contatore 27
f 896 
890
24
899
numero word 1
bram 00002039f00000000F100000084000000100000004000000100000004000000100000004000000100000004000000100000004000000
numero frame 28
numero frame -i 1
offset 924
contatore 28
f 928 
924
26
929
numero word 1
bram 00002039f00000000F10000008400000010000000400000010000000400000010000000400000010000000400000010000000400000010000000
numero frame 29
numero frame -i 1
offset 954
contatore 29
f 960 
954
28
963
numero word 1
bram 00002039f00000000F100000084000000100000004000000100000004000000100000004000000100000004000000100000004000000100000004000000
numero frame 30
numero frame -i 1
offset 988
contatore 30
f 992 
988
30
993
numero word 1
bram 00002039f00000000F10000008400000010000000400000010000000400000010000000400000010000000400000010000000400000010000000400000010000000
numero frame 31
numero frame -i 1
offset 1018
contatore 31
f 1024 
1018
32

numero word 1
bram 00002039f00000000F100000084000000100000004000000100000004000000100000004000000100000004000000100000004000000100000004000000100000004000000
0
byte 00002039f
par 0
word 0
par 0
word 0
par 2
word 100
par 3
word 19F
word modificata con parità 30000019F
9
byte 00000000F
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word F
word modificata con parità 00000000F
18
byte 100000084
par 0
word 20000000
par 0
word 20000000
par 0
word 20000000
par 0
word 20000084
word modificata con parità 020000084
27
byte 000000100
par 0
word 0
par 0
word 0
par 0
word 0
par 1
word 0
word modificata con parità 100000000
36
byte 000004000
par 0
word 0
par 0
word 0
par 0
word 2000
par 0
word 2000
word modificata con parità 000002000
45
byte 000100000
par 0
word 0
par 0
word 40000
par 0
word 40000
par 0
word 40000
word modificata con parità 000040000
54
byte 004000000
par 0
word 0
par 4
word 0
par 4
word 0
par 4
word 0
word modificata con parità 400000000
63
byte 100000004
par 0
word 20000000
par 0
word 20000000
par 0
word 20000000
par 0
word 20000004
word modificata con parità 020000004
72
byte 000000100
par 0
word 0
par 0
word 0
par 0
word 0
par 1
word 0
word modificata con parità 100000000
81
byte 000004000
par 0
word 0
par 0
word 0
par 0
word 2000
par 0
word 2000
word modificata con parità 000002000
90
byte 000100000
par 0
word 0
par 0
word 40000
par 0
word 40000
par 0
word 40000
word modificata con parità 000040000
99
byte 004000000
par 0
word 0
par 4
word 0
par 4
word 0
par 4
word 0
word modificata con parità 400000000
108
byte 100000004
par 0
word 20000000
par 0
word 20000000
par 0
word 20000000
par 0
word 20000004
word modificata con parità 020000004
117
byte 000000100
par 0
word 0
par 0
word 0
par 0
word 0
par 1
word 0
word modificata con parità 100000000
126
byte 000004000
par 0
word 0
par 0
word 0
par 0
word 2000
par 0
word 2000
word modificata con parità 000002000
135
byte 000000000
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 0
word modificata con parità 000000000
144
byte 00F000000
par 0
word 1000000
par 4
word 1C00000
par 4
word 1C00000
par 4
word 1C00000
word modificata con parità 401C00000
153
byte 00F000000
par 0
word 1000000
par 4
word 1C00000
par 4
word 1C00000
par 4
word 1C00000
word modificata con parità 401C00000
162
byte 00F000000
par 0
word 1000000
par 4
word 1C00000
par 4
word 1C00000
par 4
word 1C00000
word modificata con parità 401C00000
171
byte 00F000000
par 0
word 1000000
par 4
word 1C00000
par 4
word 1C00000
par 4
word 1C00000
word modificata con parità 401C00000
180
byte 00F000000
par 0
word 1000000
par 4
word 1C00000
par 4
word 1C00000
par 4
word 1C00000
word modificata con parità 401C00000
189
byte 00F000000
par 0
word 1000000
par 4
word 1C00000
par 4
word 1C00000
par 4
word 1C00000
word modificata con parità 401C00000
198
byte 004
par 0
word 0
par 0
word 0
par 0
word 0
par 0
word 4
word modificata con parità 000000004
30000019F00000000F020000084100000000000002000000040000400000000020000004100000000000002000000040000400000000020000004100000000000002000000000000401C00000401C00000401C00000401C00000401C00000401C00000000000004
lunghezza 207
[{}]
